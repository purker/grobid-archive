<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 C:\Users\Angela\git\grobid\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-12-29T00:16+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Variable Neighborhood Search for Capacitated Connected Facility Location Markus Leitner and Günther R. Raidl Institute of Computer Graphics and Algorithms</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country>Vienna</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Variable Neighborhood Search for Capacitated Connected Facility Location Markus Leitner and Günther R. Raidl Institute of Computer Graphics and Algorithms</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>The Capacitated Connected Facility Location Problem (CConFL) is an N P-</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>hard combinatorial optimization problem which arises in the design of last mile communication networks (fiber-to-the-curb scenarios) [1]. Formally, we are given an undirected, weighted graph G = (V, E), with edge costs c e ≥ 0, ∀e ∈ E. The node set V = {r}∪F ∪T is the disjoint union of the root node r, potential facility locations F , and possible Steiner nodes T. Each facility i ∈ F has associated opening costs f i ≥ 0 and a maximum assignable capacity D i ∈ N. Furthermore, we are given a set of potential customers C, with individual capacity demands d k ∈ N and prizes p k ≥ 0, ∀k ∈ C, the latter corresponding to the expected profit when supplying customer k. Each customer k ∈ C may be assigned to one facility of a subset F k ⊆ F , with assignment costs a the set of opened facilities F S ⊆ F and the root node r. C S ⊆ C is the set of customers feasibly (i.e. respecting the capacity constraints) assigned to facilities F S , whereas the actual mapping between customers and facilities is described by α S : C S → F S. The objective value of a feasible solution S is given by c(S) = e∈TS c e + i∈FS f i + k∈CS a αS(k),k + k∈C\CS p k , and we aim to identify a most profitable solution minimizing this function. This variant of CConFL has already been tackled by exact methods based on mixed integer programming [2] and hybrid approaches based on Lagrangian relaxation [1]. Here, we present the first pure metaheuristic approach, which computes high</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Greedy Solution Construction</head><p>Given a partial -possibly empty -solution S, a score δ i = <ref type="bibr">(−fi+</ref> k∈C ′ i p k −a i,k )</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ˆ ci</head><p>is computed for each facility i ∈ F \ F S . By C ′ i ⊆ C \ C S we denote the optimal set of customers still assignable to i, i.e. the set of customers maximizing the resulting profit which are not yet assigned to another facility in S. C</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>′</head><p>i is computedconnecting i to the partially constructed Steiner tree by means of an additional least-cost path. In each step, we add the facility with maximal score, connect it to the partially constructed Steiner tree, and assign the customers C ′ i to it, as long as at least one facility i with δ i &gt; 1 exists.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">General Variable Neighborhood Search</head><p>In a variable neighborhood descent (VND) <ref type="bibr">[4]</ref> we apply the following neighbor- hood structures to improve different aspects of a solution: Key-path improve- ment <ref type="bibr">[5,</ref><ref type="bibr">1]</ref> to reduce the costs of the Steiner tree and customer swap <ref type="bibr">[6,</ref><ref type="bibr">1]</ref> as well as single customer cyclic exchange <ref type="bibr">[1]</ref> to optimize realized assignments. For improving the set of opened facilities, we consider a single facility swap neigh- borhood which adds or removes exactly one facility. A new opened facility is connected by an additional least-cost path while redundant edges are removed after closing a facility in case it has been a leaf of the Steiner tree.</p><p>In order to escape from local optima, we embed the VND in a variable neigh- borhood search (VNS) performing shaking by swapping l = 2, . . . , l max randomly chosen potential facility locations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Greedy Randomized Adaptive Search Procedure</head><p>For comparison purposes we further embed above described VND into a greedy randomized adaptive search procedure (GRASP) <ref type="bibr">[7]</ref> based on a randomized ver- sion of aforementioned constructive heuristic. Let δ min = argmin δi {i ∈ F \ F S | δ i &gt; 1} and δ max be the minimal and maximal scores among all relevant facil- ities, respectively. Instead of always adding the facility with maximal score, at each step we randomly choose one among the facilities i ∈ F \ F S for which δ max − β(δ max − δ min ) ≤ δ i ≤ δ max holds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Preliminary Results</head><p>We performed computational experiments using the the instances from <ref type="bibr">[1,</ref><ref type="bibr">2]</ref>. VNS is terminated after ten consecutive non-improving iterations of the out- ermost largest shaking move of size l max = min{|F |, 10}. For GRASP we set α = 0.2 and generated 100 initial solutions and each experiment has been re- peated 30 times on a single core of an Intel Core 2 Quad with 2.83GHz and 8GB RAM. For the VND, we apply the neighborhood structures in the same order as introduced above, but switch back to the first -i.e. the key-path -neighborhood after changing the set of opened facilities only. The single customer cyclic ex- change neighborhood is searched using a next improvement strategy, while best improvement is applied for all other neighborhood structures.  <ref type="bibr">[2]</ref> which per- formed best among the previously presented methods. An absolute CPU-time limit of 7200 seconds has been applied to dBCP. We conclude, that both GRASP and VNS are able to compute solutions which are only slightly worse that those of dBCP, while usually needing much less CPU-time. For some instances with |F | = 200 and |C| = 75, which are particularly hard for dBCP, the obtained solutions are even significantly better than the ones obtained by dBCP within two hours. VNS seems to have small advantages over GRASP with respect to solution quality, while GRASP is usually slightly faster using the current set- tings. We are currently analyzing the usage of additional large neighborhood structures based on the mixed integer programming models from <ref type="bibr">[2]</ref> and plan to include a more detailed computational study with additional results on further, larger instances in the full paper. <ref type="table" target="#tab_0">Table 1</ref>. Relative average solution values in %, corresponding standard deviations, and median CPU times. Instances have been grouped according to |F | and |C|. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>0.01</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>0.01</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>References</head><p>1. Leitner, M., Raidl, G.R.: Combining Lagrangian decomposition with very large scale neighborhoood search for capacitated connected facility location. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 summarizes relative average objective values in percent, correspond</head><label>1</label><figDesc></figDesc><table>Variable Neighborhood Search for Capacitated Connected Facility Location 

3 

compared to the branch-and-cut-and-price approach (dBCP) from </table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
