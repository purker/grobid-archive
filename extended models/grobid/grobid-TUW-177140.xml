<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 C:\Users\Angela\git\grobid\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-12-29T00:16+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Propositional disjunctive logic programs (DLPs) are finite sets of rules of the form a 1 ∨ · · · ∨ a l ← a l+1 , . . . , a m , not a m+1 , . . . , not a n , <ref type="bibr">(1)</ref> n ≥ m ≥ l ≥ 0, where all a i are propositional atoms from some fixed universe U and not denotes default negation. An interpretation I is a model of a program P , de- noted by I |= P , iff for every rule from P (as defined above), it holds that, whenever {a l+1 , . . . , a m } ⊆ I and {a m+1 , . . . , a n } ∩ I = ∅, then {a 1 , . . . , a l } ∩ I = ∅. Following Gelfond and Lifschitz <ref type="bibr">[2]</ref>, an interpretation I is an answer set of a pro- gram P iff it is a minimal model of the reduct P I , resulting from P by (i) deleting all rules containing default negated atoms not a such that a ∈ I, and (ii) deleting all default negated atoms in the remaining rules. The collection of all answer sets of a program P is denoted by AS(P ).</p><p>In order to semantically compare programs, different notions of equivalence have been introduced in the context of the answer-set semantics. Two programs, P and Q, are strongly equivalent iff, for any program R, AS (P ∪ R) = AS (Q ∪ R); they are uni- formly equivalent iff, for any set F of facts, AS (P ∪ F ) = AS (Q ∪ F ). While strong equivalence is relevant for program optimisation and modular programming in gen- eral <ref type="bibr">[7]</ref><ref type="bibr">[8]</ref><ref type="bibr">[9]</ref>, uniform equivalence is useful in the context of hierarchically structured pro- gram components, where lower-layered components provide input for higher-layered ones. In abstracting from strong and uniform equivalence, Eiter et al. <ref type="bibr">[4]</ref> introduced the notion of a correspondence problem which allows to specify (i) a context, i.e., a class of programs used to be added to the programs under consideration, and (ii) the comparison relation that has to hold between the answer sets of the extended programs. Following Eiter et al. <ref type="bibr">[4]</ref>, we focus here on correspondence problems where the comparison re- lation is a projection (to a given set of atoms) of the standard subset or set-equality relation. The context, on the other hand, contains all programs which are sets of facts over some set A of atoms, identified with the power set 2 A over A. Thus, the concrete formal realisation of relativised uniform equivalence with pro- jection is as follows <ref type="bibr">[6]</ref>: Consider a quadruple Π = (P, Q, 2 A , ⊙ B ), where P, Q are programs, A, B are sets of atoms, ⊙ ∈ {⊆, =}, and S ⊙ B S ′ stands for {I ∩ B | I ∈ S} ⊙ {J ∩ B | J ∈ S ′ }. Π is called a propositional query equivalence problem (PQEP) if ⊙ B is given by = B , and a propositional query inclusion problem (PQIP) if ⊙ B is given by ⊆ B . We say that Π holds iff, for each F ∈ 2 A , AS (P ∪ F ) ⊙ B AS (Q ∪ F ). Note that (P, Q, 2 A , = B ) holds iff (P, Q, 2 A , ⊆ B ) and (Q, P, 2 A , ⊆ B ) jointly hold. We also refer to A as the context set and to B as the projection set.</p><p>For illustration, consider the programs P = {sad ∨ happy ←; sappy ← sad , happy; confused ← sappy} and Q = {sad ← not happy; happy ← not sad ; confused ← sad , happy},</p><p>which express some knowledge about the "moods" of a person, where P uses an aux- iliary atom sappy. The programs can be seen as queries over a propositional database which consists of facts from, e.g., {happy, sad }. For the output, it would be natural to consider the common intensional atom confused . We thus consider Π = (P, Q, 2 A , = B ) as a suitable PQEP, specifying A = {happy, sad } and B = {confused }. It is a straightforward matter to check that Π, defined in this way, holds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">System Specifics</head><p>As pointed out in Section 1, the overall approach of cc⊤ is to reduce PQEPs and PQIPs to the satisfiability problem of quantified propositional logic and to use extant solvers <ref type="bibr">[10]</ref> for the latter language as back-end inference engines for evaluating the resulting formulas. The reductions required for this approach are described by Oetsch et al. <ref type="bibr">[6]</ref> but cc⊤ employs additional optimisations <ref type="bibr">[11]</ref>. The overall architecture of cc⊤ is depicted in Fig. 1. The system takes as input two programs, P and Q, and two sets of atoms, A and B. Command-line options select between two kinds of reductions, a direct one or an optimised one, and whether the programs are compared as a PQIP or a PQEP. Detailed invocation syntax can be requested with option -h.</p><p>Next, let us turn our attention to the concrete usage of cc⊤. Let us assume that the two programs are stored in the files P.dl and Q.dl. The two sets A and B from the example are written as comma separated lists within brackets We assume them to be stored in files A and B. The concrete invocation syntax for trans- lating the problem Π = (P, Q, 2 A , = B ) into a corresponding QBF is ccT -u -e P.dl Q.dl A B where the command-line options '-u' and '-e' evince that we want to check for a notion of uniform equivalence. To check for uniform inclusion, replace '-e' by '-i' or omit the parameter. The output will be written directly to the standard-output device from where it can serve as input for QBF-solvers. Since cc⊤ does not output QBFs in a specific nor- mal form, for using solvers requiring normal-form QBFs, the additional normaliser qst <ref type="bibr">[12]</ref> is employed. Finally, cc⊤ is developed entirely in ANSI C; hence, it is highly portable. The parser for the input data was written using LEX and YACC. Further in- formation about cc⊤ is available at http://www.kr.tuwien.ac.at/research/ccT/.</p><p>Experimental evaluations using different QBF-solvers are reported in a companion pa- per <ref type="bibr">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">cc⊤ on Stage</head><p>In this section, we give a brief and, for space reasons, rather informal discussion on an application of cc⊤ for verification and debugging needs in the context of a logic programming course at our university. This is not only to make the concept of cor- respondence checking within a refined framework more tangible but also to show a concrete application field. As a subtask in this course, the students have to model an air-conditioning system consisting of components for cooling and heating, as well as a valve and a switch element. More specifically, they are given a detailed description of the desired input/output behaviour of the components and the system as a whole, and they have to develop logic programs that comply with that specification. Without go- ing into the details, such a specification could demand that the input of, e.g., a heating component consists of an airstream which can be 0 (air does not float) or 1 (air floats) and has an associated temperature (an integer from a certain range) as well as a con- trol parameter (also an integer) to control the heating power. Analogously to the input airstream, a heater has an output airstream. Now, the specification determines the be- haviour of the component with respect to the output airstream conditioned by the input airstream and the control parameter.</p><p>A straightforward strategy to verify the student's solution is the following: (i) write a sample solution that correctly implements the specification, (ii) define test cases, i.e., sets of facts representing the input for a component, and (iii) compare the output of our sample solution against the output of the student's component. This method, used in previous years and implemented by a more or less simple script, is obviously sound but not complete with respect to detecting potential flaws. Here comes cc⊤ into the play: this verification problem can be stated as a PQEP 4 , where the context set consist of the atoms that constitute the input and the projection set contains the atoms that represent the output of a component (thus allowing the students an unrestricted use of additional atoms in their programs). Hence, we have a sound and complete method for verification at hand. We employed this approach last winter semester for evaluating the submitted exercises and it compared favourably to the old method.</p><p>Two things were necessary to obtain reasonable run-times for evaluating the QBFs, however: First, we had to restrict the context class, and second, we added additional con- straints to the programs to impose some restrictions on the input of the components, like specifying not more than one input value for an airstream temperature. The later point is also to make the test more fair. Albeit we loose completeness in the sense from above this way, we are able to verify thousands of test cases implicitly with the cc⊤-approach compared to only 10 to 20 test cases with the old script. Also, a direct comparison of the results between the two test approaches is very encouraging: all errors detected by the script were also detected by the cc⊤-approach, while 26 (out of 200) components were classified as correct by the script but as non-equivalent to our sample solution by cc⊤. It is worth mentioning that on these problem instances the solver qpro <ref type="bibr">[13]</ref> showed, with a median run-time of 2.54 seconds, excellent performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper, we presented the architecture and system specifics of a new compo- nent of the tool cc⊤ for testing parameterised correspondence problems based on uni- form equivalence for disjunctive logic programs under the answer-set semantics. The correspondence problems are efficiently compiled to quantified Boolean formulas for which many solvers have been implemented. As related work, we mention the system DLPEQ <ref type="bibr">[14]</ref> for deciding ordinary equivalence, which is based on a reduction to logic programs, and the system SELP <ref type="bibr">[15]</ref> for checking strong equivalence, which is based 4 The programs under consideration are not propositional, i.e., they contain variables. Never- theless, the domain, i.e., the set of constants that can occur in the programs is finite and suchon a reduction to classical logic quite in the spirit of our implementation approach. We successfully applied cc⊤ for the verification of students' programs obtained from a laboratory course about logic programming at our university. Future work includes extending our methods to non-ground answer set programs, which are important in practical applications.  Oetsch, J., Tompits, H., Woltran, S.: Facts do not Cease to Exist Because They are Ignored:</p><p>Relativised Uniform Equivalence with Answer-Set Projection. In Proceedings of the 22nd National Conference on Artificial Intelligence   ) Master's Thesis, Vienna University of Technology. 13. Egly, U., Seidl, M., Woltran, S.: A Solver for QBFs in Nonprenex Form. In Proceedings of the 17th European Conference on Artificial Intelligence (ECAI 2006). <ref type="bibr">(2006) 477-481 14. Oikarinen, E., Janhunen, T.:</ref> Verifying the Equivalence of Logic Programs in the Disjunc- tive Case. In Proceedings of the 7th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR-7). Volume 2923 of LNCS, Springer <ref type="bibr">(2004) 180-193 15. Chen, Y., Lin, F., Li, L.: SELP -A</ref> System for Studying Strong Equivalence Between Logic Programs. In Proceedings of the 8th International Conference on Logic Programming and Non Monotonic Reasoning (LPNMR 2005). </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>,</head><label></label><figDesc>T., Tompits, H., Woltran, S.: On Solution Correspondences in Answer Set Program- ming. In Proceedings of the 19th International Joint Conference on Artificial Intelligence (IJCAI 2005). (2005) 97-102 5. Eiter, T., Fink, M.: Uniform Equivalence of Logic Programs under the Stable Model Se- mantics. In Proceedings of the 19th International Conference on Logic Programming (ICLP 2003). Volume 2916 of LNCS, Springer (2003) 224-238 6.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>8 .</head><label>8</label><figDesc>Pearce, D.: Simplifying Logic Programs under Answer Set Semantics. In Proceedings of the 20th International Conference on Logic Programming (ICLP 2004). Volume 3132 of LNCS, Springer (2004) 210-224 9. Lin, F., Chen, Y.: Discovering Classes of Strongly Equivalent Logic Programs. In Pro- ceedings of the 19th International Joint Conference on Artificial Intelligence</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>:</head><label></label><figDesc></figDesc><table>program P 

context set A 

program Q 

projection set B 

normal form 
QBF-solver 
qst 

input files 

normal form 
QBF 

ccT 

non-normal form 
QBF 

non-normal form 
QBF-solver 

Fig. 1. Overall architecture of cc⊤. 

context set A: (happy, sad), 
projection set B: (confused). 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>References 1 .</head><label>References 1</label><figDesc></figDesc><table>Oetsch, J., Seidl, M., Tompits, H., Woltran, S.: ccT: A Tool for Checking Advanced Corre-
spondence Problems in Answer-Set Programming. In Proceedings of the 15th International 
Conference on Computing (CIC 2006), IEEE Computer Society Press (2006) 3-10 
2. Gelfond, M., Lifschitz, V.: Classical Negation in Logic Programs and Disjunctive Databases. 
New Generation Computing 9 (1991) 365-385 
3. Lifschitz, V., Pearce, D., Valverde, A.: Strongly Equivalent Logic Programs. ACM TOCL 
2(4) (2001) 526-541 
4. Eiter</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
