<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 C:\Users\Angela\git\grobid\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-12-29T00:16+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<affiliation>
								<orgName>function S): T + S d © =⇒</orgName>
							</affiliation>
						</author>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>Extensions for Interaction Nets Eugen Jiresch and Bernhard Gramlich (Faculty Mentor) Institute of Computer Languages Vienna University of Technology Vienna, Austria Email: {jiresch,gramlich}@logic.at</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Interaction Nets are a novel model of computation based on graph rewriting. Their main properties are parallel evaluation and sharing of computation, which leads to efficient programs. However, Interaction Nets lack several features that allow for their convenient use as a programming language. In this paper , we describe the implementation of an extension for pattern matching of interaction rules. Furthermore, we show the cor-rectness of the implementation and discuss its complexity. rules model the addition of natural numbers (encoded by 0 and a successor</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>+</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>d © =⇒</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>0</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>+</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>© d</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. OVERVIEW</head><p>Models of computation are the basis for many program- ming languages. They allow for reasoning on formal properties of programs such as their correctness and ter- mination (i.e., whether a program eventually halts). An example is the λ-calculus, which is the basis for func- tional programming languages such as Haskell. Interaction Nets are a relatively new model of com- putation based on graph rewriting. They enjoy several useful properties that give them great potential for a fu- ture programming language. In this paper, we introduce a method for extended pattern matching which allows for the formulation of more powerful interaction rules. We describe our recent contribution, an implementation of the extended pattern matching, and discuss its properties.</p><p>This paper is organised as follows: The next subsec- tion gives a short introduction to Interaction Nets. In Section II., we introduce extended pattern matching and outline its implementation. Finally, we present a conclu- sion and give an outlook on further research.</p><p>This simple system allows for parallel evaluation of pro- grams: If more than one interaction rule is applicable at the same time, they can be applied in parallel with- out interfering with each other. In addition, nets share computation: If an expression appears multiple times in a program, it is evaluated only once.</p><p>II. NESTED PATTERN MATCHING AND ITS IMPLEMENTATION The simplicity of interaction rules brings a disadvantage: Only the two nodes that are connected via their princi- pal ports are relevant to the rule. This makes it hard to express functions that depend on more than two non- variable symbols, or in other words, have a more compli- cated pattern. Consider a function that finds and returns the last element of a list: l a s t Cons ( x , N i l ) = x l a s t Cons ( x , x s ) = l a s t x s</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. INTERACTION NETS</head><p>The first rule pattern includes three function symbols: last, Cons and N il. Since interaction rules are restricted to two function symbols per rule pattern (the names of the agents), one has to introduce an auxiliary rule to model this function:</p><p>Interaction Nets were first introduced in <ref type="bibr">[1]</ref>. A net is a graph consisting of agents (nodes) and ports (edges).</p><p>l a s t Cons ( x , x s ) = aux x x s aux x N i l = x aux x Cons ( y , y s ) = l a s t Cons ( y , y s ) d · · · x 1 x n</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>α c</head><p>Computation is modeled by rewriting the graph, which is based on interaction rules. These rules apply to two nodes which are connected by their principal ports (de- noted by the arrow). For example, the following two To counter this problem, Interaction Nets with nested patterns were introduced <ref type="bibr">[2]</ref>. Nested rules allow for pat- tern matching of more complicated functions. The bene- ficial properties of Interaction Nets are preserved if the nested rules are of a specific form (i.e., well-formed). Moreover, it is possible to transform nested rules into or- dinary ones by introducing auxiliary rules, much like in the example above.</p><p>The first author contributed to this research by imple- menting nested pattern matching in the Interaction Nets based prototype programming language inets <ref type="bibr">[3]</ref>. The corresponding theoretical description of this work was presented at the workshop RULE'09 <ref type="bibr">[4]</ref>. In the remain- der of this section, we outline the main ingredients of the implementation.</p><p>The implementation consists of two parts:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1.</head><p>Verification of the well-formedness of interaction rules 2. Translation of nested rules into ordinary rules Properties of the translation We show that the algo- rithm is terminating: The translation function either fails (due to a non well-formed rule) or yields a set of ordi- nary interaction rules. The idea behind the formal proof is to show that the number of rules and nested patterns decreases with each call of the translation function. The time and space complexity of the algorithm can be described as follows: The time complexity of the transla- tion is O(n 2 ) where n is the sum of the number of rules and nested patterns in the input rule set. Verification of well-formedness The well-formedness property of a set of interaction rules ensures that there is no overlap between rules: A given pair of agents (with nested arguments) must not match more than one rule. Otherwise, the rules cannot be applied in a determinis- tic fashion which leads to inconsistent results. The algo- rithm in inets tries to falsify this condition of the rule set: It searches (exhaustively) for two nested patterns that can match the same net. The condition is falsified if and only if the set of rules is not well-formed. A formal proof can be found in <ref type="bibr">[4,</ref><ref type="bibr">5]</ref>.</p><p>checks are per- formed). Space complexity is linear with the number of input rules. For a more detailed complexity discussion, the reader is referred to <ref type="bibr">[5]</ref>.</p><p>III. CONCLUSION AND OUTLOOK Rule translation We now give an overview of the ac- tual translation of nested rules. This is done as follows: The inets compiler reads source code and builds an ab- stract syntax tree (AST) which is further compiled into byte code and later C source code. Our translation func- tion rewrites ASTs that represent nested rules into ASTs that represent ordinary interaction rules. The back end of the compiler remains unaffected by the translation. Over- all, our translation function is similar to the compilation schemes defined in the original paper <ref type="bibr">[2]</ref>. We summarise the translation algorithm in the following steps:</p><p>In this paper, we have given a short introduction to In- teraction Nets and their extension through nested pat- terns. We have contributed to this field of research by implementing a translation algorithm for nested pat- terns in the Interaction Nets based programming lan- guage inets. This algorithm includes verification of the well-formedness of rules. Moreover, the translation han- dles programming language features that are not part of the original definition of the translation. Some impor- tant examples are data values of agents (integers, floats, strings,. . . ), side effects (declaration and manipulation of variables, I/O) and conditions.</p><p>Nested pattern matching can serve as a basis for fur- ther language extensions for Interaction Nets. These ex- tensions are pursued in the context of the PhD project of the first author which is funded by the Austrian Academy of Sciences ( ¨ OAW) and the Vienna PhD School of Infor- matics. This algorithm allows for an arbitrary number of nested patterns (i.e., the number of nested agents in a nested rule) and an arbitrary pattern depth. <ref type="bibr">[1]</ref> Y. Lafont. Interaction nets. In Proceedings of the 17th ACM symposium on Principles of programming languages (POPL), pages 95-108, 1990. <ref type="bibr">[2]</ref> A. Hassan and S. Sato. Interaction nets with nested pattern matching. Electr. Notes Theor. Comput. <ref type="bibr">Sci., 203(1):79-92, 2008. [3]</ref> The inets project. http://www.interaction-nets.org/. <ref type="bibr">[4]</ref> A. Hassan, E. Jiresch, and S. Sato. Interaction nets with nested patterns: An implementation. Prelim. Proceedings: 10th Int. Workshop on Rule-Based Pro- gramming (RULE'09), pp. 14-25, Brasília, Brazil, June 2009. <ref type="bibr">[5]</ref> A. Hassan, E. Jiresch, and S. Sato. Interaction nets with nested patterns: An implementation. Full ver- sion of <ref type="bibr">[4]</ref>. In Proceedings of RULE'09: Electr. Pro- ceed. in Theor. Comp. Sci. (EPTCS), 2010, to appear.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>REFERENCES</head></div>		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
