<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 C:\Users\Angela\git\grobid\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="de">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-12-29T00:16+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Topology in Distributed Computing DIPLOMARBEIT zur Erlangung des akademischen Grades</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2010">18.03.2010</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Diplom-Ingenieur</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">im Rahmen des Studiums Technische Informatik</orgName>
								<orgName type="department" key="dep2">Fakultät für Informatik</orgName>
								<orgName type="institution" key="instit1">Technischen Universität Wien</orgName>
								<orgName type="institution" key="instit2">Technische Universität Wien</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Nowak</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">im Rahmen des Studiums Technische Informatik</orgName>
								<orgName type="department" key="dep2">Fakultät für Informatik</orgName>
								<orgName type="institution" key="instit1">Technischen Universität Wien</orgName>
								<orgName type="institution" key="instit2">Technische Universität Wien</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Prof</roleName><forename type="first">Univ</forename></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">im Rahmen des Studiums Technische Informatik</orgName>
								<orgName type="department" key="dep2">Fakultät für Informatik</orgName>
								<orgName type="institution" key="instit1">Technischen Universität Wien</orgName>
								<orgName type="institution" key="instit2">Technische Universität Wien</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Dr</roleName><forename type="first">Ulrich</forename><surname>Schmid</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">im Rahmen des Studiums Technische Informatik</orgName>
								<orgName type="department" key="dep2">Fakultät für Informatik</orgName>
								<orgName type="institution" key="instit1">Technischen Universität Wien</orgName>
								<orgName type="institution" key="instit2">Technische Universität Wien</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Topology in Distributed Computing DIPLOMARBEIT zur Erlangung des akademischen Grades</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2010">18.03.2010</date>
						</imprint>
					</monogr>
					<note>ausgeführt von ______________________ (Unterschrift)</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>A-1040 Wien Karlsplatz 13 Tel. +43/(0)1/58801-0 http://www.tuwien.ac.at Erklärung Thomas Nowak Rechte Wienzeile 73/23 1050 Wien Hiermit erkläre ich, dass ich diese Arbeit selbstständig verfasst habe, dass ich die verwendeten Quellen und Hilfsmittel vollständig angegeben habe und dass ich die Stellen der Arbeit-einschließlich Tabellen, Karten und Abbildungen-, die anderen Werken oder dem Internet im Wortlaut oder dem Sinn nach entnommen sind, auf jeden Fall unter Angabe der Quelle als Entlehnung kenntlich gemacht habe. Abstract Topology is the general mathematical theory of convergence. Distributed computing is the formal investigation of communicating concurrent processes. We explore applications of topology to distributed computing in two directions: (1) Point-set topology and (2) algebraic topology. We use the former to study the topological structure of infinite execution trees. This enables us to unify a number of impossibility proofs, in particular, the impossibility of distributed consensus-the task of all processes in a system agreeing on a single value-in various (close to) asynchronous systems with crash failures. The latter is used to look into the combinatorial structure of configurations, i.e., the collection of current process states in the system. Configurations are regarded as simplices in a simplicial complex, and topological incompatibility of such complexes is utilized to prove the impossibility of a generalization of distributed consensus in certain systems. The particular problem considered is k-set agreement, which is the task of letting all processes agree to values within a set of at most k elements. Kurzfassung Topologie ist die mathematisch adäquate Art, umüberum¨umüber Konvergenz zu sprechen. Distributed Computing ist das formale Studium von verteilten Systemen. Die Arbeit beschäftigt sich mit zwei Anwendungen der Topologie im Bereich des Distributed Computing: (1) Mengentheoretische Topologie und (2) algebraische Topologie. Erstere wird verwendet, um die topologische Struktur von unendlichen Bäumen, die die InformationüberInformation¨Informationüber mögliche Ausführungen der Algorithmen sub-sumieren, zu untersuchen. Dieses Wissen wird verwendet, um einen einheitlichen Beweis der Unmöglichkeit von Distributed Consensus in mehreren Systemmo-dellen zu geben. Consensus ist das Einigen aller Prozesse des Systems auf einen einzigen Wert. Zweitere wird verwendet, um die kombinatorische Struktur von Konfiguratio-nen, also der Zusammenfassung aller lokaler Zustände der Prozesse, zu untersu-chen. Hierbei wird eine Konfiguration als Simplex in einem Simplizialkomplex aufgefasst. Die topologische Unvereinbarkeit solcher Komplexe ermöglicht einen Beweis der Unmöglichkeit von k-Set Agreement in gewissen Systemen. Das ist eine Verallgemeinerung des Consensus-Problems: Es wird nicht mehr verlangt, dass sich die Prozesse auf nur einen Wert einigen, sondern es wird erlaubt, dass bis zu k unterschiedliche Werte auftreten.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="de">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>This thesis deals with applications of topology to distributed computing. These are twofold: Firstly, we use point-set topology to provide a unifying topological framework for consensus impossibility proofs. Secondly, we present the impossibility proof of k-set agreement by <ref type="bibr" target="#b9">Herlihy and Shavit (1993)</ref> which uses algebraic topology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1.">Distributed Computing</head><p>Consider a system of N processes that communicate by means of passing messages. All processes take steps simultaneously at times t = 0, 1, 2, . . . and in zero time. All message delays are equal to 1/2, i.e., processes at time t+1 have received all messages sent in computing steps at time t. Processes are modeled as state machines and run a local algorithm which governs state transitions and message sendings. Interesting questions to ask might include:</p><p>(1) How many steps does it take until the last process has terminated?</p><p>(2) How many messages are sent in the execution of the algorithm? (3) Is the algorithm correct, i.e., does it indeed fulfill its task specification?</p><p>The investigation of such questions is the realm of distributed computing.</p><p>We can spice things up a bit by varying model parameters. For example, we may allow more general message delays than fixing them all at exactly 1/2. Likewise, we might choose not to fix the times at which processes take steps to exactly 0, 1, 2, . . . Of course, also the restriction that all processes take steps simultaneously might seem overly limiting.</p><p>We may also introduce the possibility of lost messages: In the completely syn- chronous model with message delays equal to 1/2, suppose that in every time frame [t, t + 1), up to N − 1 message may be lost. That is, these messages do not get deliv- ered although all other messages are delivered timely. A surprising result <ref type="bibr" target="#b15">(Santoro and Widmayer 1989)</ref> is that even in such a system with relatively few faults (there exist up to N 2 − N point-to-point links; at most N − 1 are lossy each round) it is impossible for any deterministic algorithm to solve consensus. Consensus is the task of all processes in the system agreeing on a single value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Topology</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2.">Topology</head><p>Topology is the general mathematical theory of convergence. Its most popular special case is the study of metric spaces. It tackles questions like:</p><p>(1) Does the image of a continuous function f : [0, 1] → R have a maximum?</p><p>(2) Does every Cauchy sequence converge? (3) How many holes does a given manifold have? (4) Can you cut two pizzas in half with a single cut, no matter how ugly they are shaped?</p><p>The immediate investigation of topological spaces is called point-set topology, which questions (1) and (2) can be attributed to. Another common technique is to as- sign algebraic structures to topological spaces, reason about relations between these structures and map these insights back into the world of topological spaces. This method is called algebraic topology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3.">Structure of the Thesis</head><p>Chapter 2 introduces distributed computing as a discipline and presents formal sys- tem models. In Chapter 3, we talk about an important problem specification in distributed computing: k-set agreement and its important special case, consensus. Chapter 4 investigates execution spaces of distributed algorithms by means of point- set topology and provides a unified proof of the impossibility of consensus in some important system models. Chapter 5 deals with methods from algebraic topology. It explains the approach taken by <ref type="bibr" target="#b9">Herlihy and Shavit (1993)</ref> to prove the impossibility of k-set agreement in the presence of up to k crash failures. A summary of the thesis is given in Chapter 6. Appendix A gives a self-contained introduction to point-set topology.</p><p>1 Introduction</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">A Word on Notation</head><p>For arbitrary sets A and B, we write B A = {f : A → B} to denote the set of all functions with domain A and range B. For a mapping f : A → B and subsets A ⊂ A and B ⊂ B, we define f [A ] = {f (x) | x ∈ A } and f −1 <ref type="bibr">[B ]</ref> = {x ∈ A | f (x) ∈ B }. The predicate A ⊂ B means ∀x(x ∈ A ⇒ x ∈ B) and we set P (A) = {A ⊂ A}. If M is a set of sets, then M denotes the set {x | ∃A ∈ M : x ∈ A}.</p><p>If (X, d) is a metric space, x ∈ X and ε &gt; 0, then we write B ε (x) = {y ∈ X | d(x, y) &lt; ε}.</p><p>(1.1)</p><p>If X is a topological space and S ⊂ X, then S denotes the closure of S in X.</p><p>Additional notation will be defined when necessary.</p><p>This chapter introduces the field of distributed computing to the extent needed to present the results in subsequent chapters. We start by examining some questions that are tackled and then introduce a number of mathematical models that are used in distributed computing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Introduction</head><p>Distributed computing <ref type="bibr" target="#b1">(Attiya and</ref><ref type="bibr">Welch 2004, Lynch 1996</ref>) is the investigation of concurrent processes that communicate by means of some communication medium. Commonly, processes are modeled as deterministic state machines taking steps (per- forming state transitions) in zero time. Examples of communication media include point-to-point RS232 links, a common data bus or a shared memory area allocated by the Linux kernel. These types of communicating differ in a number of properties:</p><p>While changes to a shared memory are potentially visible immediately, messages which were sent at time t may arrive at time t + δ with δ &gt; 0, i.e., the message sent at time t is not immediately visible to the receiver. The transmission delay on a bus might be equal for all processes, while transmission delays on point-to-point links might be different for different links (processes).</p><p>In message-passing systems, a fundamental distinction is whether message delays are bounded or not. Message delays are bounded if there is a constant ∆ such that every message sent at time t is guaranteed to have arrived at time t + ∆. Systems that lack this property are called message asynchronous.</p><p>Other important properties of communicating distributed systems are process syn- chrony properties. The most process synchronous system imaginable might be a sys- tem in which all processes run at exactly the same speed, i.e., steps of processes are triggered by perfectly synchronous hardware clocks. A most process asynchronous system is one in which no information whatsoever is available on when processes take a step (perform a state transition). Of course, systems with more synchrony allow for harder problems to be solved than systems with weaker synchrony. It is, for example, impossible to do any kind of real-time clock synchronization in com- pletely asynchronous systems. A major problem, however, is to determine whether one system is "more synchronous" than some other system (e.g., <ref type="bibr" target="#b4">Dolev, Dwork, and Stockmeyer 1987)</ref> and for many pairs of systems, none is more synchronous than the other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Asynchronous Message PassingàPassingà la FLP</head><p>Things get even more complicated when components may fail, in particular, in asynchronous systems where no upper bound on message delays or inter-step times of processes exist. The seminal work of <ref type="bibr" target="#b6">Fischer, Lynch, and Paterson (1985)</ref> shows that it is not possible in such systems for processes to even agree on a single value (i.e., consensus is not possible).</p><p>The following sections introduce a number of popular models for distributed sys- tems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Asynchronous Message PassingàPassingà la FLP</head><p>Consider a system of N concurrent processes that communicate by means of point-to- point links, i.e., every process can send messages to any other process. Asynchronous message-passing deserves its name because (1) there is no upper bound on the transmission delay of messages and (2) there is no upper bound on the inter-step time of processes, i.e., there is no Φ such that a process that took a step at time t is guaranteed to have taken its next step by time t + Φ.</p><p>The assumption coverage of this model, i.e., its ability to accurately describe real systems, is quite broad since it does not limit the timing behavior in any way.</p><p>An algorithm in the asynchronous message-passing system model consists of a state machine for each of the N processes. State changes occur when a process takes a step and the transition function depends on the current internal state and received messages. Apart from the internal state transition, a process may also send messages to other processes. The structure of such a computing step is depicted in Major problems arise when processes are allowed to crash, i.e., cease to take subse- quent steps. The asynchronous nature of the system model prohibits distinguishing processes which have crashed from processes whose messages are very slow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1.">A Formal Description</head><p>In the asynchronous message-passing system model <ref type="bibr" target="#b6">(Fischer, Lynch, and Paterson 1985)</ref>, a system consists of N processes numbered 1, 2, . . . , N which possess an inter- nal state, a transition function δ and a sending function β. The transition function δ maps pairs (s, m), consisting of the local state and a received message, to some internal state. A message is a pair (p, m) where p is a process name and m is a mes- sage content drawn from a pool of possible message contents M or the void value ⊥. The sending function β maps pairs (s, m) as above to a finite set of (sent) messages. Every process has a distinguished subset of its set of states -the set of initial states. A configuration is a tuple (s 1 , s 2 , . . . , s N ) of internal states of the processes, together with the set of in-transit messages -the message buffer.</p><p>An important point to understand is the relationship between the two notions of event and step, which we will define now. An event in the classical asynchronous message-passing model is a message. If in some configuration C, the message buffer holds the message (event) e = (p, m), then we say that event e is applicable to configuration C and we may apply e to C by the following means: We define the successor configuration C = e(C) by the following procedure.</p><p>(1) Remove e = (p, m) from the message buffer.</p><p>(2) Determine the internal successor state of process p by invoking the transition function δ using message content m and p's current state.</p><p>(3) Determine, and add to the message buffer, the messages (q, n) sent by process p to processes q by invoking the sending function β.</p><p>The pair (C, C ) where C = e(C) for some event e is called a step. If we can apply event e to configuration C, we say that e is applicable to C. An event has the ability to trigger different steps, depending upon the configuration it is applied to.</p><p>An infinite sequence of events that are in turn applicable to C is called a sched- ule starting from C. If (e 1 , e 2 , . . . ) is a schedule starting from configuration C, we define the corresponding sequence of steps as follows: We set C 0 = C and C k+1 = e k (C k ) for k 0; the corresponding sequence of steps is then defined to be</p><formula xml:id="formula_0">(C 0 , C 1 ), (C 1 , C 2 ), (C 2 , C 3 ), . . .</formula><p>. Such a corresponding sequence of steps is called a run or an execution.</p><p>A process is called non-faulty or correct in some run or schedule if it takes steps infinitely often. A process is called faulty if it is not non-faulty. A run or schedule is called admissible (with respect to the model parameter f 0) if every message sent to non-faulty processes is received and at most f processes are faulty.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">Omission Failure Model</head><p>In the synchronous message-passing model (Lynch 1996, Part I), all processes p 1 , p 2 , . . . , p N take their steps at the same time, e.g., every process takes a step at times t = 0, 1, 2, 3, . . . Furthermore, there does exist an upper bound on message delays, namely every message sent at time t is delivered before time t + 1. That is, processes execute in lock-step rounds: Every process is guaranteed to have received 2 Distributed Computing Models</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Omission Failure Model</head><p>all messages that were sent to it before the current computing step. <ref type="figure" target="#fig_1">Figure 2.</ref>2 con- tains a space-time diagram of a synchronous execution; the diagonal arrows indicate messages.</p><formula xml:id="formula_1">t = 0 t = 1 t = 2 t = 3 p 1 p 2 p 3</formula><p>Figure 2.2.: Synchronous message-passing</p><p>In the synchronous omission failure model ( <ref type="bibr" target="#b15">Santoro and Widmayer 1989</ref>, Sec- tion 4.1), in every round, i.e., in every time interval [t, t + 1), up to N − 1 messages may be lost. These omissions create difficulties and yield a number of impossibility results, because the adversary can completely silence a process by omitting all of its outgoing messages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1.">A Formal Description</head><p>In the synchronous omission failure system model, a system consists of N processes numbered 1, 2, . . . , N which possess an internal state, a transition function δ and a sending function β. The transition function δ maps pairs (s, M ), consisting of the local state and a set of (received) messages, to some internal state. A message is a pair (p, m) where p is a process and m is the message content taken from a set M of possible message contents. The sending function β maps an internal state s to a set M of messages such that every other process occurs in the first component of an element in M . Every process has a distinguished subset of its set of states -the set of initial states. A configuration is a tuple (s 1 , s 2 , . . . , s N ) of internal states of the processes. <ref type="bibr">1</ref> An event in the model is a set O ⊂ {1, . . . , N } 2 \ {(1, 1), (2, 2), . . . , (N, N )} with |O| N − 1, the set of omissions. We define the successor configuration C = O(C) by the following procedure.</p><p>(1) Determine the sent messages of all processes by invoking the sending functions β.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Asynchronous Shared Memory</head><p>(2) Ignore all messages over links in O.</p><p>(3) Determine the internal successor state of all processes by invoking the transition functions δ using the newly received (non-ignored) messages.</p><p>The pair (C, C ) where C = O(C) for some event O is called a step.</p><p>An infinite sequence of events is called a schedule. If (O 1 , O 2 , . . . ) is a schedule and C is a configuration, we define the corresponding sequence of steps as follows: We set C 0 = C and C k+1 = O k (C k ) for k 0; the corresponding sequence of steps is then defined to be</p><formula xml:id="formula_2">(C 0 , C 1 ), (C 1 , C 2 ), (C 2 , C 3 ), . . .</formula><p>. Such a corresponding sequence of steps is called a run or an execution.</p><p>A process is called non-faulty or correct in some run or schedule if infinitely many message sent by it get delivered. A process is called faulty if it is not non-faulty.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.">Asynchronous Shared Memory</head><p>In this section, we consider a system of N processes communicating by means of M shared read-write registers. These registers can hold an unbounded amount of infor- mation and support two types of operations: read and write. Operation read(R) returns the value of register R and operation write(R, v) writes value v to register R. The fundamental limitation in this model is that processes can perform only one of the operations read and write in a single computing step. Hence a process performing a write does not know which value it overwrites.</p><p>As in asynchronous message-passing, there is no upper bound on inter-step times of processes. 2 Also, the possibility of processes crashing introduces difficulties.</p><p>A sometimes convenient simplification is to limit registers to be single-writer reg- isters. That is, a shared register has a single process assigned to it which is the only process that may write to the register. It is known <ref type="bibr">(Attiya and Welch 2004, Theorem 10.9</ref>) that this is not a serious restriction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.1.">A Formal Description</head><p>In the asynchronous shared memory system model (Attiya and Welch 2004, Sec- tion 4.1), a system consists of (a) N processes numbered 1, 2, . . . , N which possess an internal state, a transition function δ and a shared memory operation function β and (b) M shared read-write registers which possess a value. The shared memory operation function β maps an internal state s to a shared memory operation, i.e., read(R) or write(R, v). The transition function δ maps pairs (s, v), consisting of the local state and the return value of the shared memory operation β(s), to some internal state. Every process has a distinguished subset of its set of states -the set of initial states. A configuration is a tuple (s 1 , s 2 , . . . , s N ) of internal states of the processes, together with a tuple (v 1 , v 2 , . . . , v M ) of shared memory register values.</p><p>An event in the asynchronous shared memory model is a process number j ∈ {1, 2, . . . , N }. We define the successor configuration C = j(C) by the following procedure.</p><p>(1) Determine the next shared memory operation by process p j by invoking the shared memory operation function β.</p><p>(2) Perform the shared memory operation by process p j , i.e., change the register value in case of a write operation.</p><p>(3) Determine the internal successor state of process p j by invoking the transition function δ using the return value from (2).</p><p>The pair (C, C ) where C = j(C) for some event j is called a step.</p><p>An infinite sequence of events that are in turn applicable to C is called a sched- ule starting from C. If (j 1 , j 2 , . . . ) is a schedule starting from configuration C, we define the corresponding sequence of steps as follows: We set C 0 = C and C k+1 = j k (C k ) for k 0; the corresponding sequence of steps is then defined to be</p><formula xml:id="formula_3">(C 0 , C 1 ), (C 1 , C 2 ), (C 2 , C 3 ), . . .</formula><p>. Such a corresponding sequence of steps is called a run or an execution.</p><p>A process is called non-faulty or correct in some infinite run or schedule if it takes steps infinitely often. A process is called faulty if it is not non-faulty. A run or schedule is called admissible (with respect to the model parameter f 0) if at most f processes are faulty.</p><p>In case of single-writer registers, the set of allowed operations that may occur as the image of functions β is restricted such that there do not exist two processes p i and p j with operation functions β i and β j that can perform writes to a common register R.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.2.">Atomic Snapshots</head><p>A system with shared read-write registers supports atomic snapshots if there exists, besides read and write, a third operation, namely scan() which returns all register values at once, i.e., a tuple (v 1 , v 2 , . . . , v M ) of register values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5.">Safety and Liveness</head><p>The notions of safety and liveness properties were introduced by <ref type="bibr" target="#b11">Lamport (1977)</ref> and have been well adopted in the distributed computing community. Lamport used these notions to subdivide correctness proofs of programs into smaller and more homogeneous pieces.</p><p>Intuitively, a safety property is the statement that "something will not happen" <ref type="bibr" target="#b11">(Lamport 1977)</ref>. For instance, take the sentence "No message is ever sent." The "thing" that should not happen according to this statement is that a message is sent. At any time in an execution, if already a message was sent, there is no way that the execution fulfills the above safety property, no matter how the execution continues. Hence if a "bad thing" happened in an execution prefix, any execution that extends this prefix does not fulfill the safety property.</p><p>A liveness property is the statement that "something must happen" <ref type="bibr" target="#b11">(Lamport 1977</ref>). An example would be the sentence "Every message that was sent is eventually received." The important point is that at any time in an execution, even if not all sent messages were received yet, it is still possible that the execution fulfills the above liveness property (because the message can be received later). Hence for any finite execution prefix, there exists an execution extending this prefix that fulfills the liveness property.</p><p>The immediate formalization of these two notions is contained in the following definition.</p><p>Definition 2.1. Let S A be the set of admissible executions of some algorithm A. A property of executions is a subset P ⊂ S A .</p><p>We call a property P a safety property if the following holds: For all E ∈ S A \ P exists some n ∈ N such that every E ∈ S A that coincides with E in the first n components holds E ∈ P. We call a property P a liveness property if the following holds: For all E ∈ S A and every n ∈ N there exists an E ∈ P that coincides with E in the first n components.</p><p>It should be noted that the intuitive meaning of these notions is sometimes in conflict with Definition 2.1, in particular in the presence of failures. An investigation of this problem and alternative definitions were given by Charron-Bost, Toueg, and Basu (2000).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Problem Specifications</head><p>In this chapter, we discuss two prominent problems in distributed computing: the consensus problem and the k-set agreement problem which is a generalization of consensus. By the term "problem" we mean a specification on the behavior of an algorithm, which is said to "solve a problem" if all its executions satisfy the spec- ification. The reason why we introduce exactly these two problems is firstly their fundamentality and secondly that we will prove impossibility of their solution in specific system models in later chapters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Consensus</head><p>Informally, consensus is the task of getting all processes in a distributed system to agree on a single value. It is known (e.g., <ref type="bibr" target="#b6">Fischer, Lynch, and Paterson 1985</ref><ref type="bibr" target="#b4">, Dolev, Dwork, and Stockmeyer 1987</ref><ref type="bibr" target="#b5">, Fich and Ruppert 2003</ref> that consensus, as easy as the problem specification might seem, is in fact impossible to solve in a variety of system models in the presence of faults.</p><p>Every process starts its execution with a prescribed input value and decides upon termination on an output value. We will consider consensus only in system models with model parameter f 1. Otherwise, consensus is trivially solvable. One simpli- fication 1 that we make is that the set of possible input and output values is equal to {0, 1}. This special case of consensus is called binary consensus.</p><p>Formally, input and output values are modeled in the following way: First, we impose the restriction that every process has to have at least two distinct initial states. For every process p j , let S j denote its set of states and I j ⊂ S j its set of initial states. We demand |I j | 2. Input values are modeled by a mapping ι j : I j → {0, 1} which we demand to be non-trivial. Output values are modeled by a mapping δ j : S j → {0, 1, ⊥}. We say that process p j has decided on v ∈ {0, 1} in state s ∈ S j if δ j (s) = v. We demand that decisions are irrevocable, i.e., if s is part of some configuration C, δ j (s) ∈ {0, 1}, and configuration C follows C in some execution, then δ j (s ) = δ j (s) where s is p j 's state in C . Hence, we may extend δ j to execution of the algorithm.</p><p>Of course, even with f crash failures, agreement on a value can be achieved trivially by programming every process to decide on 0. Hence, we limit our attention to non- trivial consensus. We say that an algorithm solves consensus if: 3.2. k-Set Agreement</p><p>Consensus is 1-set agreement. In k-set agreement with k ∈ N, we expand the set of possible input (and output) values to {1, 2, . . . , M } with M N and replace condition (A) with Definition 3.1. Let S be the set of admissible executions of a k-set agreement (or consensus) algorithm and let C be a configuration in S. We say that C is α-valent if all successor configurations of C if which a decision was reached have the decision value α. In this case, we call C univalent, otherwise multivalent, or in the case M = 2 bivalent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Point-Set Topology</head><p>In this chapter, we treat techniques from elementary point-set topology (see Ap- pendix A for an introduction to the subject) with respect to their applicability to distributed computing. We show how to equip execution spaces with a natural topol- ogy that can be used to derive impossibility results. In particular, we re-prove FLP impossibility <ref type="bibr" target="#b6">(Fischer, Lynch, and Paterson 1985)</ref> in this novel topological frame- work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">The Topology of Execution Spaces</head><p>This section introduces the necessary tools for formulating the main result of this thesis in Section 4.2. We show how to equip a space of executions of some distributed algorithm with a certain topology that helps us express executional properties in a topological manner.</p><p>But before we talk about execution spaces, we have to fix the term "execution" and explain what we mean by it. <ref type="bibr">1</ref> Common to all models of distributed computing is the notion of a configuration, meaning a snapshot of the state of a system. That is, a configuration encompasses information about the internal state of every process and the state of the communication medium (e.g., messages in transit or contents of shared memory). An execution is a sequence of configurations such that each configuration in the sequence is a successor of the former ones. Notice that the meaning of these two notions is heavily model-dependent. From the topological viewpoint, we are not interested in the ontological question of what a configuration really is; we only need to know which successor configurations are possible. Thus, we "shift focus from the structure of protocols for a distributed system to the structure of the set of possible schedules of a distributed system." (Saks and Zaharoglou 2000)</p><p>We denote by C A the set of all configurations of algorithm A. Let S A denote the set of admissible executions, which is a subset of the set C ω A of sequences of configurations. <ref type="bibr">2</ref> We will equip the latter space with a natural topology that induces a topology on its subset S A .</p><p>When there is no danger of ambiguity, we will write C and S for C A and S A , respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Point-Set Topology</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">The Topology of Execution Spaces</head><p>We endow C with the discrete topology, i.e., every subset of C is defined to be open. This topology is induced by the metric</p><formula xml:id="formula_4">d D : C × C → R + , d D (C, C ) = 0 if C = C 1 else. (4.1)</formula><p>The natural topology to endow C ω = n∈ω C with is the product topology (see Section A.2.5).</p><p>Lemma 4.1. The product topology on C ω is induced by the metric</p><formula xml:id="formula_5">d (C k ), (C k ) = 2 − inf{j|C j =C j } (4.2)</formula><p>Proof. We have to show that the sets that are open with respect to the product topology (Definition A.14) are exactly those sets that are open with respect to the metric (Example A.3).</p><p>Let A ⊂ C ω be open with respect to the metric d. The definition of openness with respect to the metric asserts existence of ε(γ) &gt; 0 for every γ = (C k ) ∈ A such that</p><formula xml:id="formula_6">A = B ε(γ) (γ). (4.3) γ∈A</formula><p>From this equation we derive that it suffices to show that B ε (γ) is open with respect to the product topology whenever ε &gt; 0. In this case, choose the integer K minimal with the property 2 −K ε. This choice implies of the open set {C m } ⊂ C is exactly the set of elements in C ω whose mth component is equal to C m . Also, by definition, these inverse images are open with respect to the product topology. We thus conclude on the openness of B ε (γ) with respect to the product topology, because the latter set in (4.4) is equal to</p><formula xml:id="formula_7">K π −1 m {C m } . (4.5) m=0</formula><p>To prove the converse direction, it suffices to show that all sets of the form</p><formula xml:id="formula_8">π −1 m [O]</formula><p>where O is a subset <ref type="bibr">3</ref> of C are open with respect to the metric d. But we may write</p><formula xml:id="formula_9">π −1 m [O] = B 2 −m (γ) (4.6) γ∈π −1 m [O]</formula><p>because both sides are equal to the set of elements in C ω whose mth element is in O.</p><p>The openness of B 2 −m (γ) with respect to the metric d now concludes the proof.</p><p>Finally, we endow S ⊂ C ω with the subset topology (Example A.9), that is, the topology induced by the same metric.</p><p>This topology on execution spaces was introduced by <ref type="bibr" target="#b0">Alpern and Schneider (1985)</ref>. They characterized safety and liveness properties of executions in a topological way. Namely, a property is a safety property if and only if the set of executions satisfying it is closed (Definition A.8) with respect to the previously defined topology. Similarly, a property is a liveness property if and only if the set of executions satisfying it is dense <ref type="bibr">(Definition A.11</ref>) with respect to this topology. They used this characterization to prove that any property is an intersection of a safety and a liveness property. Also, in non-pathological cases, every property is an intersection of two liveness properties. We will now retrace these insights.</p><p>In the following, let C be the set of configurations of some algorithm.</p><p>Lemma 4.2. A property P ⊂ C ω is a safety property if and only if P is closed in C ω .</p><p>Proof. It is equivalent to prove that P is a safety property if and only if its comple- ment P c is open.</p><p>Let P be a safety property. Then, by definition, for every E ∈ P c , there exists some index k such that for every E ∈ C ω that agrees with E in the first k components, we have E ∈ P c . By setting ε = 2 −k , we arrive at the insight that B ε (E) ⊂ P c and we are done.</p><p>Conversely, let P c be an open set. Let E ∈ P c . We have to show that there exists some index k such that for any E ∈ C ω that coincides with E in the first k components, we have E ∈ P c . The set P c being open, there exists some ε &gt; 0 such that B ε (E) ⊂ P c . Let k ∈ N such that 2 −k &lt; ε. Then the set of all E that coincide with E in the first k components is a subset of B ε (E), which concludes the proof.</p><p>Lemma 4.3. A property P ⊂ C ω is a liveness property if and only if P is dense in C ω .</p><p>Proof. Let P be a liveness property and let E ∈ C ω and ε &gt; 0. We will show that there exists some E ∈ P such that d(E, E ) &lt; ε. Let k ∈ N such that 2 −k &lt; ε. By definition of liveness, there exists an extension E of the execution fragment formed by taking the first k components of E such that E ∈ P. But then d(E, E ) &lt; 2 −k &lt; ε and we are done.</p><p>Conversely, let P be a dense set. Let (C 0 , C 1 , . . . , C k ) be an execution fragment. We have to show that there exists some extension E ∈ P of the fragment. Let E be any extension of the fragment. Because P is dense, there exists E ∈ P such that d(E, E ) &lt; 2 −k−1 , which shows that E is also an extension of (C 0 , C 1 , . . . , C k ).</p><p>The following result was proved by <ref type="bibr" target="#b0">Alpern and Schneider (1985)</ref>.</p><p>Theorem 4.1. Let P ⊂ C ω be any property. Then there exists a safety property S and a liveness property L such that P = S ∩ L.</p><p>Proof. Define S = P to be the topological closure of P and L = S c ∪ P. Then of course S ∩ L = P. It is also clear that S is closed, hence a safety property by Lemma 4.2. It remains to show that L is dense (Lemma 4.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>By Lemma A.4(4), we have</head><formula xml:id="formula_10">L = P c ∪ P ⊃ P c ∪ P = C ω (4.7)</formula><p>which concludes the proof.</p><p>Notice that the above notions of closedness and density, but also of safety and liveness, are dependent on the surrounding space C ω . We used these notions in a "global" sense, meaning that they were understood with respect to the whole space C ω . When considering a specific algorithm running in a specific model, however, we may mean something different by "safety" and "liveness".</p><p>For example, consider a consensus algorithm A with set S ⊂ C ω of admissible executions. Then C 0 , the set of initial configurations of A, is not equal to C, because there exist configurations in which processes have decided, but no process has decided in an initial configuration. It follows that S is not dense in C ω , since every E ∈ S starts with an initial configuration. Hence S, as a property in C ω , is not a liveness property. But S itself is of course a liveness (and even a safety) property in S. It follows that the notions of safety and liveness are relative notions. Of course, statements analog to that of Lemma 4.2 and Lemma 4.3 hold relative to some set S of executions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1.">Motivation</head><p>In this subsection, we will demonstrate topological proof techniques for impossibility results with the help of a simple example.</p><p>Consider a consensus algorithm A for N 3 processes communicating by means of single-reader multiple-writer shared read-write registers. <ref type="bibr">4</ref> Of these processes, f = N − 1 might fail by crashing. According to Section 2.4, a configuration C in this model consists of a tuple (s 1 , s 2 , . . . , s N ) and a tuple (v 1 , v 2 , . . . , v M ) where s i is the internal state of process p i and v i is the content of a shared memory register. An event in this system model is a process number j ∈ {1, 2, . . . , N }, which expresses that process p j takes a step. An admissible schedule is a sequence of process numbers in which at least one process occurs infinitely often (recall that f = N − 1). Hence every sequence in {1, 2, . . . , N } N is an admissible schedule.</p><p>We work with two sequence spaces: the space of schedules and the space of exe- cutions. In this example, the set of schedules is equal to Σ = {1, . . . , N } N and the set S of admissible executions of some algorithm is a subset of C ω where C denotes the set of all configurations. We equip both sets with the topology discussed at the beginning of Section 4.1.</p><p>Lemma 4.4. Let S be the set of admissible executions of some consensus algorithm A. Define the map ∆ : S → {0, 1} such that ∆(E) is the decision value of algorithm A in execution E. Then ∆ is continuous.</p><p>Proof. It suffices to show that ∆ is locally constant, i.e., for all E ∈ S, there exists some neighborhood N of E (Definition A.6) such that ∆ is constant on N , that is,</p><formula xml:id="formula_11">∆(E ) = ∆(E) for all E ∈ N .</formula><p>Let E ∈ S be some admissible execution of A. By the termination property of consensus, there exists some configuration C in E such that some process has already decided. Let k be an index such that the kth configuration in E is equal to C. We claim that</p><formula xml:id="formula_12">N = E ∈ S | E coincides with E up to the kth configuration (4.8)</formula><p>is the desired neighborhood. It is clear that ∆ is constant on N , because by the agreement condition of consensus, no other consensus decision value is possible after a process has decided.</p><p>It remains to show that N is indeed a neighborhood of E. Define ε = 2 −k . With the metric defined in (4.2), we conclude that N is the set of admissible executions that have distance to E less than ε. Thus N is an ε-ball, hence open.</p><p>Let S denote the set of admissible executions. When we fix some initial configura- tion I, by the semantics of the model, every admissible schedule determines exactly one admissible execution. This induces a mapping f I : Σ → S, details of which are depicted in <ref type="figure" target="#fig_4">Figure 4</ref>. Lemma 4.5. If we equip C 0 with the discrete topology, then f : C 0 × Σ → S as defined above is continuous.</p><formula xml:id="formula_13">1. initial config. C 0 ; schedule (j 1 , j 2 , j 3 , j 4 , . . . ) f j 1 j 2 j 3 j 4 j 5 C 0 C 1 C 2 C 3 C 4 · · ·</formula><p>Proof. Let (I, σ) be an element of C 0 × Σ and let (I k , σ k ) k be a sequence converging to <ref type="bibr">(I, σ)</ref>.</p><formula xml:id="formula_14">Then I k → I and σ k → σ. We will show f (I k , σ k ) → f (I, σ).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Point-Set Topology</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">The Topology of Execution Spaces</head><p>Since C 0 carries the discrete topology, convergence of (I k ) means that it is eventu- ally constant (and equal to I). Hence it is no loss of generality to assume I k = I for all k.</p><p>It remains to show that f I (σ k ) → f I (σ). Let ε &gt; 0. Choose n ∈ N such that 2 −n &lt; ε. Because the nth component of (σ k ) must be eventually constant for every n, there exists some K ∈ N such that the first n components of σ k agree for all k K. But then, by construction of f I (σ), also the first n components of f I (σ k ) agree for all k K. Hence</p><formula xml:id="formula_15">d f I (σ), f I (σ k ) &lt; 2 −n &lt; ε for all k K (4.9)</formula><p>and we are done.</p><p>By definition of the system model, f : C 0 ×Σ → S is surjective. But by Tychonoff's theorem (Theorem A.3), Σ and also C 0 × Σ are compact. Hence S is a continuous image of a compact space, which implies that S itself is compact (Lemma A.10). Since C ω is metrizable, hence Hausdorff, we conclude that S is closed in C ω (Lemma A.9). Thus, S is a safety property in C ω (Lemma 4.2).</p><p>The established continuity (both ∆ and f I are continuous) of ∆ • f I : Σ → {0, 1} for I ∈ C 0 has the following consequence: The sets Σ α , α ∈ {0, 1}, of schedules σ for which ∆(f I (σ)) = α, i.e., where the algorithm decides on α in execution f I (σ), are closed in Σ, because they are inverse images of the closed sets {α} ⊂ {0, 1} under a continuous mapping. Being closed in a compact space, the sets Σ α are compact (Lemma A.9). But since each of these two sets is the complement of the other in Σ, they are also open. The following lemma now establishes a uniform bound K such that every execution starting from I is univalent after the Kth step. By passing to the maximum over all I ∈ C 0 , we get a uniform bound K not re- stricted to a particular initial configuration. In other words, C K is univalent for</p><formula xml:id="formula_16">every (C 0 , C 1 , . . . , C K , . . . ) ∈ S.</formula><p>Lemma 4.6 (Lebesgue). Let (X, d) be a compact metric space and let (U λ ) λ∈Λ be an open covering of X, i.e., every U λ is open and X = U λ . Then there exists some ε &gt; 0 such that for any x ∈ X, the ball B ε (x) is contained in one of the U λ .</p><formula xml:id="formula_17">Proof. For every x ∈ X let δ x &gt; 0 such that B δx (x) ⊂ U λ for some λ. The family of balls B δx/2 (x) indexed by x ∈ X forms an open covering of X. By compactness (Definition A.13), there exist x 1 , x 2 , . . . , x m ∈ X such that m X = B δ j /2 (x j ). (4.10) j=1</formula><p>where δ j = δ x j . We set δ = min{δ 1 , δ 2 , . . . , δ m } and ε = δ/2.</p><formula xml:id="formula_18">Let x ∈ X, then x ∈ B δ j /2 (x j ) for some j. Hence d(x, x j ) &lt; δ j /2. Let now y ∈ B ε (x), then d(x, y) &lt; ε δ j /2. The triangle inequality implies d(y, x j ) &lt; δ j , hence B ε (x) ⊂ B δ j /2 (x) ⊂ B δ j (x j ) ⊂ U λ (4.11)</formula><p>4 Point-Set Topology</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">The Topology of Execution Spaces</head><p>for some λ and we are done.</p><p>Corollary 4.1. There exists a K ∈ N such that for every execution (C 0 , C 1 , . . . ) ∈ S, the Kth configuration, C K , is univalent.</p><p>On to the non-topological part of the impossibility proof: Together with the exis- tence of a bivalent initial configuration, <ref type="bibr">6</ref> we have established the existence of a fork, i.e., there exists a bivalent configuration C and direct successor configurations D 0 and D 1 of C such that D α is α-valent. We show that such a fork is impossible. <ref type="bibr">7</ref> Then, we have proved consensus impossibility.</p><p>Let p be the process taking the step C → D 0 and let q be the process taking the step C → D 1 . The processes p and q are distinct.</p><p>Case 1: Both p and q perform read operations. Since f = N −1 2, we can choose a third process r and apply the schedule (r, r, . . . ) to both D 0 and D 1 . The resulting decision value (the value that r decides on) is in both cases the same, because the local state of r and all register values that r can read are the same in D 0 and</p><formula xml:id="formula_19">D 1 . But since D 0 is 0-valent and D 1 is 1-valent, this is a contradiction.</formula><p>Case 2: p performs a read and q performs a write operation. The same trick as in Case 1 works. Choose a process other than p and other than the reader of the register that q writes to.</p><p>Case 3: Both p and q perform write operations. Silence the readers of both registers that get written to by p and q.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2.">Execution Trees</head><p>Executions are sequences of configurations. At any point (configuration) in such a sequence, it is often possible to choose from more than one successor configuration, as governed by the system model and the algorithm. One can, in a natural way, assign a decision tree to any set of executions that captures the decision of choosing a successor. We will characterize in Section 4.1.3 certain sets of executions whose decision trees capture all the information about the original set. This follows an idea by <ref type="bibr" target="#b12">Lubitch and Moran (1995)</ref>.</p><p>Let C be the set of configurations of an algorithm A and let S ⊂ C ω . We will construct a tree T (S) that reflects the local decisions of choosing a successor con- figuration. We construct it inductively, of course. First of all, we insert a root ⊥. We then connect to it nodes labeled with every configuration C 0 that occurs as an initial configuration in S, see <ref type="figure" target="#fig_4">Figure 4</ref>.2. These are exactly the vertices at depth 1. Suppose now that we already constructed the tree up to depth n. We describe how to construct the vertices at depth n + 1. Let C n−1 be a vertex at depth n. There exists a unique path (⊥, C 0 , C 1 , . . . , C n−1 ) from ⊥ to C n−1 . We connect to C n−1 nodes labeled with every configuration C n such that (C 0 , C 1 , . . . , C n−1 , C n ) occurs as a prefix of some execution in S.</p><p>, . . . ) Note that this procedure indeed does result in a tree since no single vertex is connected twice to a predecessor node. In particular, vertices are not configurations, but only labeled by configurations. Hence it is indeed possible that there exist two different nodes in T (S) that are labeled with the same configuration. The labels of nodes at depth n are exactly the configurations that occur in the (n−1)th component of executions in S. Also, nodes in this tree may have infinite degree. But, as we will see later, for any specific distributed system model and algorithm running on it, the tree of the set of admissible executions will be locally finite, i.e., nodes will have finite degree.</p><formula xml:id="formula_20">4 1 , C 4 2 2 0 4 0 , C ( C 1 0 , C 1 1 , C 1 2 , . . . ) ( C , C ( C 2 1 , C 2 2 , . . . ) ( C 5 0 , C 5 1 , C 5 2 , . . . ) (C 3 0 , C 3 1 , C 3 2 , . . . ) S T (S) ⊥ C 1 0 C 2 0 C 3 0 C 4 0 C 5 0</formula><p>By construction, every execution in S corresponds to an infinite path in the tree T (S). The converse, however, is not true in general. There exist sets S and infinite paths in T (S) that do not correspond to an execution in S. For example, consider a shared memory algorithm for N 3 processes and up to f = N − 2 crash faults. The corresponding set S contains all sequences of process numbers with the property that at least two processes occur infinitely often. In the tree T (S) every node has exactly N children -one for every process. Hence the infinite path (1, 1, . . . ) exists in T (S), but this sequence is not an element of S. In the following section, we will explore for which sets S every path in the assigned tree describes an execution is S.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3.">Path-Sequence Duality</head><p>For a tree T (S) as constructed in 4.1.2, let P T (S) denote the set of executions in C ω that correspond to infinite paths in T (S). The relation P T (S) ⊃ S always holds. We are interested in those S for which P T (S) = S. These are the sets of executions for which it suffices to make local decisions when constructing an admis- sible execution. For all sets that do not have this property, we have to filter out some executions constructed by virtue of paths in order to arrive at the set of admissible executions. The following theorem solves the above question.</p><p>Theorem 4.2. Let S ⊂ C ω . The following are equivalent:</p><formula xml:id="formula_21">(1) P T (S) = S (2) S is closed in C ω</formula><p>In this case, S is compact if and only if T (S) is locally finite.</p><formula xml:id="formula_22">Proof. (1)⇒(2): Let E = (C 0 , C 1 , . . . ) ∈ S = P T (S)</formula><p>. Then either C 0 is not an initial configuration in S or there exists some n ∈ N such that C n is not a child of C n−1 in T (S). In the first case, no execution that starts with C 0 is an element of S, i.e., B 1 (E) ⊂ C ω \ S. In the second case, by definition of T (S), we have</p><formula xml:id="formula_23">B 2 −n (E) ⊂ C ω \ S. We conclude that C ω \ S is open, hence S is closed. (2)⇒(1): Let E = (C 0 , C 1 , . . . ) ∈ P T (S)</formula><p>. We show E ∈ S. By definition of T (S), for any n ∈ N there exists some execution E n ∈ S that starts with (C 0 , C 1 , . . . , C n ). Since E n → E as n → ∞ and since S is closed, the claim fol- lows from Lemma A.3. Now, let T (S) be locally finite, i.e., every node has finite degree. Then, for every n ∈ ω, there are only finitely many configurations possible to appear as the nth component of an execution in S. Denote the set of possible configurations in the nth component by C n . Then, S ⊂ n∈ω C n . The latter set being compact <ref type="bibr">(Theorem A.3 and Example A.10)</ref>, the compactness of S follows from Lemma A.9(1).</p><p>Finally, let S be compact. Let v be any vertex in T (S). We will show that v has only finitely many children. Suppose that v =⊥ is the root and ⊥ has infinitely many children, i.e., C 0 is infinite. Consider the following open covering of S:</p><formula xml:id="formula_24">B 1 (C 0 , C 1 , . . . ) = E ∈ S | E starts with C 0 where C 0 ∈ C 0 (4.12)</formula><p>By compactness of S, there exists a finite subcovering, but this is impossible. The case v =⊥ is completely analogous.</p><p>The advantage of closed sets of executions is now obvious: We can restrict ourselves to local decisions when constructing an execution in the set. So, if we are considering some closed subset of the set of admissible executions, we are guaranteed admissibility of the execution constructed in a local fashion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Topological Impossibility</head><p>This section contains the core of our topological impossibility proofs. We begin with the topological main theorem:</p><formula xml:id="formula_25">Theorem 4.3. Let (X, d) be a metric space, A ⊂ X closed in X and C ⊂ X compact. If A ∩ C = ∅, then d(A, C) = inf {d(a, c) | a ∈ A, c ∈ C} &gt; 0. (4.13) Proof. Suppose not, i.e., d(A, C) = 0. Define the map f A : C → [0, ∞) by f A (x) = inf{d(x, a) | a ∈ A}.</formula><p>If we are able to show that f A is continuous, then we are done.</p><p>Because then the continuous function f A attains its minimum in the compact set C (Lemma A.11), i.e., there exists some c ∈ C with f A (c) = 0. But since c is an element of the open set X \ A, there exists some</p><formula xml:id="formula_26">ε &gt; 0 such that B ε (c) ⊂ X \ A. This implies f A (c) = inf{d(c, a) | a ∈ A} ε &gt; 0, a contradiction.</formula><p>It remains to show that f is continuous. Let ε &gt; 0 and c ∈ C. We choose δ = ε.</p><formula xml:id="formula_27">For c ∈ C with d(c, c ) &lt; ε, we have f A (c) − f A (c ) d(c, c ) + f A (c ) − f A (c ) &lt; ε (4.14)</formula><p>where we assumed without loss of generality that f A (c) f A (c ) and used that f A (c) d(c, c ) + f A (c ) by the triangle inequality and that taking the infimum preserves weak inequalities.</p><p>If we are able to find a compact (hence closed, Lemma A.9(2)) set K ⊂ S for which d(K 0 , K 1 ) = 0 where K α denotes the set of α-deciding executions, we are done. We then know that the K α are compact, because the decision function ∆ is continuous. But this is a direct contradiction to Theorem 4.3.</p><p>We will, however, use a slightly different argument to derive a contradiction. Most often, we will not directly reason with sequences of configurations. What we will rather do is follow an idea which was introduced by <ref type="bibr" target="#b12">Lubitch and Moran (1995)</ref> and generalized by <ref type="bibr" target="#b13">Moses and Rajsbaum (2002)</ref>: We use schedulers to construct executions.</p><p>Definition 4.1. Let S be the set of admissible executions of some algorithm. A scheduler for S is a metric space X together with a continuous map f : X → S. A scheduler is called closed if X is compact.</p><p>We will use schedulers to describe the construction of executions in a (closed) subset of S (namely the image of f ). An example of a scheduler is the above mapping f of Section 4.1.1. We prominently used the fact that f and in particular that ∆ • f was a continuous mapping. The general result about transportation of properties in Theorem 4.3 is the following lemma. Proof. (1): Every closed set A ⊂ X is compact since X is compact (Lemma A.9(1)). Since f is continuous, we may deduce that f [A] is compact (Lemma A.10). But S is Hausdorff and hence every compact set is closed by Lemma A.9(2); in particular f <ref type="bibr">[A]</ref>.</p><p>(2): Let d(A, B) = 0. If we set ε k = 2 −k we get by the uniform continuity of f (similar to Theorem A.2) the existence of δ k &gt; 0 such that</p><formula xml:id="formula_28">d(x, y) &lt; δ k ⇒ d(f (x), f (y)) &lt; 2 −k (4.15)</formula><p>By hypothesis there exist sequences (a k ) in A and (</p><formula xml:id="formula_29">b k ) in B such that d(a k , b k ) &lt; δ k for all k ∈ N. The implied relation d (f (a k ), f (b k )) → 0 as k → ∞ now concludes the proof.</formula><p>Any closed scheduler we will construct in the subsequent will, like S, itself be a sequence space, i.e., X ⊂ L N for some set L. Hence a closed scheduler X can be viewed as the set of paths in the locally finite tree T (X); see Theorem 4.2. Often, the set L will be a set of layers (Moses and Rajsbaum 2002), i.e., each ∈ L will correspond to a finite sequence of events. For example, a layer in the shared memory model will be every process taking one step in some fixed order. The fact that each layer is a fixed finite sequence of events will immediately establish continuity of f . Hence the continuity of ∆ • f where ∆ is the decision function will establish the compactness of both X 0 and X 1 where X α is the set of schedules in which the algorithm decides on α. It remains to show d(X 0 , X 1 ) = 0 to complete the impossibility proof by virtue of Theorem 4.3 -see Section 4.2.1.</p><p>In a way, a scheduler f : X → S defines a sub-model of S. This is particular apparent if we consider schedulers that consist of sequences of layers: In S, it is defined which configurations may follow which. The layering limits these possibilities and takes "shortcuts" from one configuration to another. Thus, the tree T (X) can be seen as a sub-tree of T (S) in some sense with the additional convenient property that P T (X) = X (if we are considering a closed scheduler).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1.">Additional Structure -Configuration Similarity</head><p>Up to now, we solely considered a single structural entity regarding the set of execu- tions: In which order configurations may occur in an execution. But there is more information to configurations than their order. To be precise, we now introduce two similarity relations on the set of configurations; one model-dependent (process similarity) and one model-independent (valence similarity).</p><p>Definition 4.2. Let C and C be configurations. We write C ∼ v C if it is not the case that one is 0-valent and the other is 1-valent. Then C and C are called valence similar.</p><p>Definition 4.3. Let C and C be configurations of a message-passing algorithm, i.e., an algorithm in either of the models of Sections 2.2 or 2.3. We write C ∼ p C and call C and C process similar if C and C differ in the state of at most one process. We denote the transitive closure of this relation by the same name and symbol.</p><p>Definition 4.4. Let C and C be configurations of a single-writer shared-memory algorithm (Section 2.4). We write C ∼ p C and call C and C process similar if C and C differ in the state and registers 8 of at most one process. We denote the transitive closure of this relation by the same name and symbol.</p><p>The following lemmata provide a relation between these two similarity notions and an argument why d(X 0 , X 1 ) &gt; 0, i.e., a 0-1-fork, is often not possible in closed sets.</p><p>Lemma 4.8. Consider either a message-passing or a single-writer shared memory model with at most f 1 crash faults. Let S be a closed set of admissible executions that (1) has the possibility to silence a process, i.e., from every configuration C and for every process p exists an infinite path in T (S) starting from C in which p does not take steps.</p><p>(2) is locally uniform, i.e., if a sequence of events that does not involve process q is applicable to a configuration C in S, then it is applicable to all configurations in S that differ from C at most in the state (and registers) of q. Because we assumed that we can silence process q, there exists a sequence of events starting from both D and D that does not include steps taken by q. By the event semantics of the particular models, the processes other than q decide on the same values in both executions, hence the valency of D and D is the same. This is a contradiction.</p><p>Lemma 4.9. Let C be a bivalent configuration. Then not all successor configurations of C are valency similar.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Impossibility Results</head><p>We will list a number of impossibility proofs in this section that utilize our topological framework. In particular, we give a closed scheduler for each of the models. We will use arguments from Moses and Rajsbaum 2002, Sections 3, 7 and 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1.">Asynchronous Message Passing</head><p>We now present a topological proof of the consensus impossibility result <ref type="bibr" target="#b6">(Fischer, Lynch, and Paterson 1985)</ref> in the model introduced in Section 2.2.</p><p>We fix some enumeration p 1 , p 2 , . . . , p N of the processes. The scheduler we will use is the following. We choose</p><formula xml:id="formula_30">L π = {aok π , except π } ∪ {delayed π (i) | 1 i N } (4.16) for any permutation 9 π ∈ S N , L = π∈S N</formula><p>L π as the set of layers, and X = L N . The mapping f : X → S is defined to be the application of a sequence of layers to these initial configurations. More precisely, every layer in L is defined to be a finite sequence of events (see below for the exact definition) and the application of a sequence <ref type="figure" target="#fig_1">( 1 , 2 , 3</ref> , . . . ) of layers to an initial configuration C 0 is defined by concatenating all layers to a single schedule σ and taking the corresponding sequence of steps.</p><p>It remains to describe the layers aok π , except π and delayed π (i). In layer aok π , every process takes steps in the order governed by the permutation π, i.e., in the order p π(1) , p π(2) , . . . , p π(N ) , each process receives all messages sent to it thus far. Layer except π is the same as aok π except that process p π(N ) does not take steps. In layer delayed π (i), processes take steps in the order of π and all messages are received except for messages sent from p π(i) to p π(i)+1 mod N in this very layer. (They are likely to be received in the next layer -namely if and only if the recipient takes a step in the next layer.)</p><p>We equip the finite set L with the discrete topology and X = L N with the product topology. Finite sets are always compact and by Tychonoff's theorem (Theorem A.3), also X is compact. The mapping f is continuous, because the nth component of f (x) only depends on the first n components of x ∈ X. 10 Hence we are dealing with a closed scheduler.</p><p>Let C be a configuration. For any layer ∈ L, let C · denote the configuration that arises when applying to C. We want to show that the precondition of Lemma 4.8 is fulfilled. The set f [X] of executions is closed and has the ability to silence and is locally uniform. Let D = C · and D = C · be children of C in the tree T (X). We want to show that D ∼ v D with Lemma 4.8. In a first step, we restrict ourselves to the case ∈ L π for some π ∈ S N . This sub-claim will follow if we 4 Point-Set Topology</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Impossibility Results</head><p>show C · ∼ v C · aok π for all ∈ L π . The non-trivial cases are = except π and = delayed π (i). In the first case, we note that C ·except π ·aok (π•σ) = C ·aok π ·except π where σ is the permutation with σ(j) ≡ j − 1 mod N . This is because in both cases the order in which processes take steps is equal to</p><formula xml:id="formula_31">π(1), . . . , π(N − 1), π(N ), π(1), . . . , π(N − 1) (4.17)</formula><p>with the same sequence of events (receive all messages). The second case is = delayed π (i). There, we have C · delayed π (i) ∼ p C · aok π because these two configurations only differ in the state of a single process (the process to which not all messages were delivered -namely π(i) + 1 mod N ). This concludes the proof of the precondition of Lemma 4.8 if we restrict our choices to a single L π .</p><p>Let now π, σ ∈ S N . We want to show C · aok π ∼ v C · aok σ . For this, write</p><formula xml:id="formula_32">π −1 • σ = τ 1 • τ 2 • · · · • τ k</formula><p>where every τ j is a transposition, i.e., every τ j flips the positions of two neighboring elements of {1, 2, . . . , N }. <ref type="bibr">11</ref> An elementary result of group theory is the possibility to write a permutation as a product of transpositions. We see that it suffices to show C · aok π ∼ v C · aok (π•τ ) for transpositions τ ∈ S N . But this follows from</p><formula xml:id="formula_33">C · aok π ∼ v C · delayed π (j) = C · delayed (π•τ ) (j) ∼ v C · aok (π•τ ) (4.18)</formula><p>if τ flips j and j + 1 mod N .</p><p>The rest of the proof is as follows: Prove the existence of a bivalent initial configu- ration by classical means (e.g., a bit-flipping argument; note that we can completely silence a process from an execution using our layers), use Theorem 4.3 to arrive at d(X 0 , X 1 ) &gt; 0, deduce the existence of a 0-1-fork and finally use Lemmata 4.8 and 4.9 to derive a contradiction.</p><p>Notice that we proved the following result:</p><p>Theorem 4.4. There is no consensus algorithm in the asynchronous message-passing model with at most one crash failure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2.">Asynchronous Shared Memory</head><p>In this section, we will prove impossibility of consensus in asynchronous system models of Section 2.4 with shared single-writer read-write registers where one process may fail by crashing (e.g., Fich and Ruppert 2003, Section 5.2).</p><p>We again fix some enumeration p 1 , p 2 , . . . , p N of the processes. Again, we choose for every permutation π ∈ S N a set L π = {aok π , except π } of layers and set L = π∈S N L π . The so-defined scheduler f : L N → S is closed (see previous section for details). In layer aok π , all processes take a step in the order π(1), π(2), . . . , π(N ). In layer except π , all processes except for p π(N ) take a step in order π(1), π(2), . . . , π(N −</p><note type="other">4 Point-Set Topology 4.3 Impossibility Results 1). Let C be any configuration. It is C · aok π · except π = C · except π · aok (π•σ) where σ(j) ≡ j − 1 mod N which shows that the hypothesis of Lemma 4.8 holds if we restrict our choices to a single L π . As above, we are done if we show C · aok π ∼ v C · aok (π•τ ) for every transposition τ . But this follows from the fact that we consider single-writer registers by the following case distinction. Let τ flip indices i and i + 1. Case 1: Processes p π(i) and p π(i+1) both perform a read operation or both perform a write operation. Then the resulting configurations are equal. Case 2: Process p π(i) performs a read and p π(i+1) performs a write. Then the resulting configurations differ in at most the state of p π(i) .</note><p>Case 3: Process p π(i) performs a write and p π(i+1) performs a read. Then the resulting configurations differ in at most the state of p π(i+1) .</p><p>The rest of the impossibility proof follows as above: Existence of a bivalent initial configuration by bit-flipping (since we can completely silence a process), existence of a fork by Theorem 4.3 and contradiction by Lemma 4.8.</p><p>Theorem 4.5. There is no consensus algorithm in the asynchronous single-writer shared memory model with at most one crash failure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3.">Transient Message Loss</head><p>We will prove the impossibility result of Santoro and Widmayer 1989, Section 4.1 in the model of Section 2.3.</p><p>Let p 1 , p 2 , . . . , p N be an enumeration of the set of processes. We define the set of layers to be</p><formula xml:id="formula_34">L = {loss(i, j) | 1 i N, 0 j N } (4.19)</formula><p>and again describe the scheduler f : L N → S by describing each of the layers. As above, this scheduler is closed. The layer loss(i, j) is equal to the single event (set of omissions)</p><formula xml:id="formula_35">O = {(i, k) | k j and k = i} .<label>(4.20)</label></formula><p>For every configuration, we have C · loss(i, j) ∼ p C · loss(i, j − 1) and loss(i, 0) = loss(i , 0) which implies that the precondition of Lemma 4.8 holds. Note that we can silence any process p i from any time on by repeatedly issuing loss(i, N ). By the usual method, this concludes the impossibility proof.</p><p>Theorem 4.6. There is no consensus algorithm in the synchronous message-passing model with at most N − 1 per-round message omissions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Algebraic Topology</head><p>This chapter deals with a different view on topology than that we took in Chapter 4. We will consider algebraic topology <ref type="bibr" target="#b7">(Hatcher 2002)</ref>. In this discipline, we assign to topological spaces certain algebraic objects, reason about relations between these algebraic objects and then translate back these insights to statements about topo- logical spaces. These techniques will enable us to prove the impossibility of k-set agreement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Introduction</head><p>Algebraic topology splits up into two major threads: homotopy and homology. An example of a construction used in homotopy is the fundamental group of a (path- connected) topological space X. It is defined as the quotient of the group of all loops, i.e., continuous maps [0, 1] → X starting from and ending at the same point x 0 ∈ X where the group operation is defined as the juxtaposition of two loops, with respect to the equivalence relation of homotopy, i.e., continuous deformability of one loop to another. A very natural question to ask is which topological spaces have trivial fundamental groups, i.e., in which spaces are all loops continuously deformable into each other. The class of these spaces is called the class of simply connected spaces.</p><p>The other major branch of algebraic topology is homology. Similar to homotopy, it deals with spaces of continuous mappings <ref type="bibr">[0,</ref><ref type="bibr">1]</ref> q → X, but unlike homotopy, it does not directly define a group operation on this set, but rather factors the free Abelian group generated by these mappings with respect to a certain equivalence relation. We will need a few techniques from homology in the course of this chapter and we provide a brief introduction to this topic in Section 5.2.</p><p>Turning to the world of distributed computing again, what we will do in this chapter is proving impossibility of k-set agreement in asynchronous systems commu- nicating by read-write registers in the presence of up to k crash failures. The proof that we present here was developed by <ref type="bibr" target="#b9">Herlihy and Shavit (1993)</ref>. Its strategy is to introduce a structure on the set of local processor states of an algorithm, namely that of a simplicial complex and reason that the subcomplex of final configurations (configurations in which enough processes have decided) is incompatible with the so- called output complex, i.e., a simplical complex describing decisions that are allowed by the problem statement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Homology</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Homology</head><p>This section introduces basic notions of homology theory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1.">Chain Complexes</head><p>In this section, we will discuss the basic algebraic objects we will encounter along the way. These are chain complexes and more generally graded Abelian groups.</p><p>Let A * = (A k ) k∈Z be a sequence of Abelian groups. Then we call A * a graded Abelian group. A morphism ϕ of degree m ∈ Z from A * to B * is a sequence ϕ k : A k → B k+m of Abelian group morphisms. We denote a morphism of degree m = 0 plainly by the name morphism. That is, a graded Abelian group is just an enumerable collection of Abelian groups and a morphism is just an enumerable collection of Abelian group morphisms.</p><p>A chain complex (A * , ∂) is a graded Abelian group A * together with a morphism ∂ of degree −1 from A * to itself, i.e., for every k ∈ Z we have that ∂ k : A k → A k−1 is an Abelian group morphism, with the additional property that ∂ k • ∂ k+1 = 0 for all k ∈ Z. This restriction is the same as saying that the image im ∂ k+1 is a subset of the kernel 1 ker ∂ k . We call ∂ the boundary operator of the chain complex.</p><p>A morphism ϕ : C → D of graded Abelian groups between chain complexes is a morphism of chain complexes if and only if for all k ∈ Z it holds that</p><formula xml:id="formula_36">ϕ k−1 • ∂ C k = ∂ D k • ϕ k .</formula><p>In other words, the diagram in <ref type="figure" target="#fig_11">Figure 5</ref>.1 commutes. </p><formula xml:id="formula_37">· · · ∂ C k−2 ← −−− − C k−2 ∂ C k−1 ← −−− − C k−1 ∂ C k ← −−− − C k ∂ C k+1 ← −−− − C k+1 ∂ C k+2 ← −−− − C k+2 ∂ C k+3 ← −−− − · · · ϕ k−2   ϕ k−1   ϕ k   ϕ k+1   ϕ k+2   · · · ∂ D k−2 ← −−− − D k−2 ∂ D k−1 ← −−− − D k−1 ∂ D k ← −−− − D k ∂ D k+1 ← −−− − D k+1 ∂ D k+2 ← −−− − D k+2 ∂ D k+3 ← −−− − · · ·</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2.">The Homology Functor</head><p>To every chain complex C, we may assign a special graded Abelian group H * (C) called the homology of C. It has very interesting properties and is especially inter- esting when putting topological spaces into the mix as is done in Section 5.4.1.</p><p>Let C be a chain complex. We have already noted that im ∂ q+1 is contained in ker ∂ q for every q ∈ Z. These two sets being Abelian groups, we may form the quotient H q = ker ∂ q / im ∂ q+1 and H q is again an Abelian group. Hence, H(C) = (H q ) q∈Z is a graded Abelian group which we call the homology of C.</p><p>Note that if H q = 0 for all q ∈ Z, then ker ∂ q = im ∂ q+1 . Hence the homology of a chain complex measures how far the following diagram is from being exact 2 at C q :</p><formula xml:id="formula_38">· · · ∂ q−1 ← −− − C q−1 ∂q ← − C q ∂ q+1 ← −− − C q+1 ∂ q+2 ← −− − · · · (5.1)</formula><p>Let ϕ : C → D be a chain complex morphism. Because of the defining rela- tion for chain complex morphisms, we may deduce that</p><formula xml:id="formula_39">ϕ q [im ∂ C q+1 ] ⊂ im ∂ D q+1 and ϕ q [ker ∂ C q ] ⊂ ker ∂ D q .</formula><p>But this implies that ϕ q factors to an Abelian group mor-</p><formula xml:id="formula_40">phism ker ∂ C q / im ∂ C q+1 → ker ∂ D q / im ∂ D q+1</formula><p>. We write ϕ * for the resulting morphism H(C) → H(D). This construction has the property that (ψ • ϕ) * = ψ * • ϕ * and (id C ) * = id H(C) which indeed qualifies it for the name functor.</p><p>Let ψ : C → D be another chain complex morphism. A chain homotopy from ϕ to ψ is a graded Abelian group morphism h : C → D of degree 1 such that</p><formula xml:id="formula_41">ψ − ϕ = ∂ D • h + h • ∂ C . (5.2)</formula><p>In this case, we write ϕ ψ and it is ϕ * = ψ * : H(C) → H(D).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Simplicial Complexes</head><p>A simplicial complex C is a set of sets with the following property:</p><p>(LC) If A ∈ C and B ⊂ A, then B ∈ C.</p><p>In other words, a simplicial complex is left-closed with respect to the set inclusion relation. The elements of C are called simplices and the elements of the set C are called vertices. For a simplex S ∈ C, we define its dimension dim S = |S| − 1. We set dim C = sup S∈C dim S.</p><p>A vertex map between two simplicial complexes C and D is a map f : C → D. It is called simplicial if for every S ∈ C, f [S] ∈ D, i.e., every simplex in C gets mapped to a simplex in D. Simplicial complexes together with simplicial vertex maps form a category.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1.">Simplicial Homology</head><p>In this section, we will assign a chain complex C(C) and also its homology H(C) to any simplicial complex C. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Simplicial Complexes</head><p>Definition 5.1. Let S be a set. We define the free Abelian group generated by S to be the group Z S .</p><p>Let C be a simplicial complex and fix any total order on its set of vertices. For any q 0 let C q denote the set of q-dimensional simplices in C and let C q be the free Abelian group generated by C q . The family (C q ) q∈Z is a graded Abelian group. We will now define a boundary operator ∂ q : C q → C q−1 . Let S = {v 0 , v 1 , . . . , v q } ∈ C q with v i &lt; v j for i &lt; j. It suffices to define ∂ q for such elements by the universal property of free Abelian groups. 3 Set</p><formula xml:id="formula_42">q ∂ q (S) = (−1) k {v 0 , v 1 , . . . , v k−1 , v k+1 , . . . , v q } . (5.3) k=0</formula><p>Lemma 5.1. With the above definition, ∂ q • ∂ q+1 = 0.</p><formula xml:id="formula_43">Proof. Let S = {v 0 , v 1 , . . . , v q+1 } ∈ C q+1 with v i &lt; v j for i &lt; j. Then q+1 ∂ q (∂ q+1 (S)) = ∂ q q+1 (−1) k (S \ {v k }) = (−1) k ∂ q (S \ {v k }) k=0 k=0 q+1 q = (−1) k k−1 (−1) (S \ {v , v k }) + (−1) (S \ {v k , v }) k=0 q+1 q+1 (5.4) = (−1) k k−1 (−1) (S \ {v , v k }) + (−1) (S \ {v k , v }) k=0 = (−1) k+ (S \ {v , v k }) − (−1) k+ (S \ {v k , v }) 0 0 = 0 as claimed.</formula><p>It is clear that a different choice of the total order on C yields an isomorphic chain complex. This concludes the definition of the chain complex C(C) = (C * , ∂). We set H(C) = H(C(C)).</p><p>Let f : C → D be a simplicial vertex map. Define for every q 0 the map</p><formula xml:id="formula_44">f # : C q (C) → C q (D) for S ∈ C q , by f # (S) = f [S] if dim f [S] = q 0 else. (5.5)</formula><p>The so-defined map f # : C(C) → C(D) is a chain map and we have</p><formula xml:id="formula_45">(g •f ) # = g # •f # and id S C # = id C(C) .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Algebraic vs. Combinatorial Topology</head><p>Definition 5.2. Let C be a simplicial complex and let k 0. We say that C is k-acyclic if H 0 (C) ∼ = Z and H q (C) = 0 for 1 q k.</p><p>Let C and D be simplicial complexes and let Σ : C → P (D) be a mapping with the following properties:</p><p>(1) Σ(S) is a simplicial complex for every S ∈ S.</p><p>(2) Σ(S) ⊂ Σ(S ) if S ⊂ S . (3) Σ(S) is (q − 1)-acyclic for every S ∈ S with dim S = q.</p><p>Then we call Σ an acyclic carrier. Let ϕ : C(C) → C(D) be a chain map. We say that ϕ is carried by Σ if T ∈ Σ(S) for all S ∈ C and T ∈ D with c T = 0 where ϕ(S) = T ∈D c T T . The following is Herlihy and Rajsbaum 2000, Theorem 3.3:</p><p>Theorem 5.1. Let Σ : C → P (D) be an acyclic carrier.</p><p>(1) There exists a chain map C(C) → C(D) that is carried by Σ.</p><p>(2) If ϕ, ψ : C(C) → C(D) are both carried by Σ and dim S = dim Σ(S) for all S ∈ C, then ϕ = ψ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.">Algebraic vs. Combinatorial Topology</head><p>This section explains the commonalities of pure algebraic topology, i.e., the investiga- tion of topological spaces with help of assigned algebraic structures, and combinato- rial topology, i.e., the investigation of combinatorial structures with help of assigned algebraic structures. To be more precise, we introduce the homology of a topological space and the geometric realization of a simplicial complex and show that these two constructions are compatible. Results from this section are not needed later on and are presented to deepen the reader's understanding of these interconnections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.1.">Singular Homology</head><p>We will now show how to relate the algebraic construction of homology to topological spaces. More precisely, we will assign to every topological space X a chain complex C(X) and a graded Abelian group H(X) called its singular homology.</p><p>Definition 5.3. Let q 0. The topological space</p><formula xml:id="formula_46">∆ q = x ∈ R q+1 | x j = 1 and x j 0 for all j (5.6)</formula><p>is called the q-dimensional standard simplex.</p><p>The qth component of the graded Abelian group of C(X) is defined to be the free Abelian group generated by the set of continuous mappings ∆ q → X. It remains to define the boundary operator ∂ q : C q (X) → C q−1 (X). It suffices to define this map on the generators of C q (X). So let σ : ∆ q → X be continuous. Consider the following continuous functions δ i q : ∆ q−1 → ∆ q for 1 i q + 1:</p><formula xml:id="formula_47">δ i q (x 1 , . . . , x q ) = (x 1 , . . . , x i−1 , 0, x i , x i+1 , . . . , x q ) (5.7)</formula><p>It is easy to see that this function really has values in ∆ q . We now define ∂ q (σ) by the equation</p><formula xml:id="formula_48">q+1 ∂ q (σ) = (−1) i−1 σ • δ i q . (5.8) i=1</formula><p>Lemma 5.2. For any topological space X and any q ∈ Z, with the above definition of C(X), it holds that ∂ q • ∂ q+1 = 0.</p><p>Hence C(X) is really a chain complex. We may thus form its homology H(C(X)) or just H(X) in short.</p><p>Let f : X → Y be a continuous mapping. We define the mapping f # :</p><formula xml:id="formula_49">C(X) → C(Y ) by setting f # (σ) = f • σ for continuous σ : ∆ q → X. It holds that (g • f ) # = g # • f # and (id X ) # = id C(X)</formula><p>. We denote by f * the mapping H(X) → H(Y ) induced by the chain complex morphism f # .</p><p>Definition 5.4. Let X be a topological space and let k 0. We say that X is k-acyclic if H 0 (X) ∼ = Z and H q (X) = 0 for 1 q k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.2.">Geometric Realization of Simplicial Complexes</head><p>In this section, we assign a topological space |C| to every simplicial complex C, called its geometric realization.</p><p>Let C be a simplicial complex. As a set, we define |C| by Consequences of these definitions are (Spanier 1966, Sec. 3.1):</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Configuration Complexes</head><p>(1) |f | is continuous.</p><p>(2) |g • f | = |g| • |f | and id S C = id |C| (3) If C is finite then |C| is a compact Hausdorff space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.3.">Equivalence</head><p>The following theorem relates the homologies of C and |C| (Spanier 1966, Sec. 4.6, Theorem 8).</p><p>Theorem 5.2. Let C be a simplicial complex. Then H(C) ∼ = H(|C|).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.">Configuration Complexes</head><p>This section introduces simplicial complexes that we will assign to algorithms in order to reason about the topological structure of these algorithms. In these complexes, vertices will represent a state of a single process and a simplex consisting of vertices s 1 , s 2 , . . . , s N will represent a reachable configuration in which the ith process has local state s i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.1.">Input Complexes</head><p>k-set agreement is a decision task, i.e., every process has an input value and computes an output value. Simplicial complexes provide a convenient way to describe the structure of possible combinations of input and output values.</p><p>For example, consider the complex of initial configurations of the t-resilient binary consensus problem. Here, every process p j starts with a private input value x j ∈ {0, 1}. For simplicity, we assume that every process has only two distinct initial states: one with input value x j = 0 and one with input value x j = 1. Denote by (j, α) the initial state of process p j with input value x j = α. Then the set of vertices is equal to {(1, 0), (1, 1), (2, 0), (2, 1), . . . , (N, 0), (N, 1)} .</p><p>(5.12)</p><p>Basic simplices are sets of the form</p><formula xml:id="formula_50">S = {(1, α 1 ), (2, α 2 ), . . . , (N, α N )} (5.13)</formula><p>where α j ∈ {0, 1}. The input complex for the binary consensus problem is defined by the set of these basic simplices and its subsets. A geometric realization of the input complex for N = 2 and N = 3 is depicted in <ref type="figure" target="#fig_11">Figure 5</ref>.2.</p><p>The input complex of k-set agreement is similar to that of consensus except that the set in which the input values x j may vary is changed from {0, 1} to {1, 2, . . . , M } where M N . </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.2.">Output Complexes</head><p>We may also look at the output complex of the t-resilient binary consensus problem, i.e., the complex that describes the possible output values y j . Vertices here are also of the form (j, α) which reflects the fact that process p j has decided to output value y j = α. Basic simplices are either of the form</p><formula xml:id="formula_51">S = {(j 1 , 0), (j 2 , 0), (j 3 , 0), . . . , (j r , 0)} (5.14)</formula><p>or of the form</p><formula xml:id="formula_52">S = {(j 1 , 1), (j 2 , 1), (j 3 , 1), . . . , (j r , 1)} (5.15)</formula><p>where all j are distinct and r N − t, that is, at least N − t processes have decided and they all decided to the same value. The output complex for the t-resilient binary consensus problem is defined by the set of these basic simplices and its subsets. Examples for N = 2 and N = 3 are depicted in <ref type="figure" target="#fig_11">Figure 5</ref>.3. The output complex of the t-resilient k-set agreement problem is defined by the set of simplices of the following form S = {(j 1 , y 1 ), (j 2 , y 2 ), . . . , (j r , y r )} (5.16) where |{j 1 , . . . , j r }| N − t and |{y 1 , . . . , y r }| k and all of its subsets.</p><p>The problem specification of a decision task is a mapping ∆ that maps a basic input simplex S n−1 to the set of basic output simplices that are allowed as decision values given the specified initial configuration (input simplex).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.3.">Protocol Complexes</head><p>When considering an initial configuration ( an input simplex) of a decision task, one may ask which final configurations, i.e., configurations in which all processes have halted (decided or crashed), are reachable from this initial configuration.</p><p>The answer to this question defines a mapping from input simplices to sets of final configurations. For an input simplex S ∈ I with dim S n − t − 1, i.e., |S| n − t, we define the complex P(S) to be the reachable subcomplex of P where only processes take steps that appear in S with initial states as specified in S. The set of configurations (viewed as simplices) that occur in the image of this mapping define a complex, the protocol complex. It encompasses the information which final configurations may occur when running the protocol (algorithm). To be more precise, a simplex</p><formula xml:id="formula_53">S = {C j 1 , C j 2 , C j 3 , . . . , C jr } (5.17)</formula><p>is in the protocol complex if and only if</p><p>(1) C j k is an internal state of process with number j k in which this process has decided (2) all j k are distinct (3) there exists an execution of the protocol in which exactly the processes with numbers j 1 , j 2 , . . . , j r decide and all other processes crash (and do not reach a decision value) (4) in the above execution, process p j k halts with internal state equal to C j k .</p><p>Consider the protocol complex P of some protocol that solves a decision task with input complex I, output complex O and decision map ∆. Then, we may assign to every final state of a process (vertex in P) its decision value (vertex in O). More precisely, a final state C j gets mapped to α ∈ {1, 2, . . . , M } if and only if process p j has decided to α in state C j . This mapping can be extended in a natural manner to a map from simplices in P to simplices in O. Denote this simplicial vertex map by δ : P → O.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6.">Impossibility of k-Set Agreement</head><p>In this section, we prove the impossibility of wait-free k-set agreement in asyn- chronous shared-memory environments, as presented in Herlihy and Shavit 1993. Of course, we will heavily rely on methods from algebraic topology. In particular, we will define a class of protocols ("full information protocols") that has stronger system assumption than the asynchronous shared-memory model and analyze its protocol complex. This will help us derive a contradiction. A fortiori, this will establish the impossibility result for usual asynchronous shared-memory systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6.1.">Full Information Protocols</head><p>Full information protocols communicate using a set of single-writer shared-memory variables which allows for taking atomic snapshots, i.e., the contents of all variables are read in a single step. Denote by RW n k the asynchronous shared-memory model with read-write registers where at most k processes may fail by crashing and denote by FI n k the model of full information protocols where at most k processes may fail by crashing.</p><p>The set of algorithms in FI n k is quite restricted: The set S 0 ∼ = I of initial states of processes are arbitrary, but the rest of the algorithm is defined by a single decision vertex map δ : F → O ∪ {⊥} where O is an output complex and the set F is the set of full information states. The set F consists of tuples of the form (v 1 , v 2 , . . . , v n ) where every v j is either contained in I ∪ {⊥} or again such a tuple. In a full information protocol each process</p><p>(1) has a single unbounded shared register it can write.</p><p>(2) writes its input value to its shared register in its first step.</p><p>(3) after the first step, repeatedly reads the values v j from all registers R j , puts them together into a tuple v = (v 1 , . . . , v n ) and writes this tuple v into its own register.</p><p>(4) if δ(v) =⊥ after such an iteration, the process halts with output value equal to δ(v).</p><p>Theorem 5.3. If there exists a k-set agreement protocol in RW n k , then there exists a k-set agreement protocol in FI n k .</p><p>Proof. The non-trivial part of this proof is to simulate multiple-writer registers with single-writer registers. This is part of <ref type="bibr" target="#b1">Attiya and</ref><ref type="bibr">Welch 2004, Theorem 10.9. - Attiya and</ref><ref type="bibr">Welch 2004, Theorem 10.15</ref> shows that the converse of Theorem 5.3 also holds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6.2.">Properties of Full Information Protocols</head><p>The most important property of full information protocols to us is the following (Herlihy and Shavit 1993, Corollary 4.9):</p><p>Theorem 5.4. Let P be a protocol in FI n n−1 and let S ∈ I with dim S = q. Then P(S) is (q − 1)-acyclic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6.3.">This Implies Impossibility</head><p>This section contains the proof of Herlihy and Rajsbaum 2000, Corollary 5.3.</p><p>Lemma 5.3. Let P be a protocol in FI n n−1 . Then S → P(S) is an acyclic carrier.</p><p>Proof. Property (1) of an acyclic carrier is fulfilled by definition of P(S). Property <ref type="formula">(3)</ref> is Theorem 5.4. We will show property (2). So let S ⊂ S in I. Let T ∈ P(S), we have to show T ∈ P(S ). By definition, T is a final configuration of the protocol where only processes in S take steps with initial states as in S. Since S ⊂ S , the initial states of processes in S are equal in S and S . Also, since it is admissible to crash processes initially, every execution contributing to P(S) also contributes to P(S ). Hence T ∈ P(S ) as claimed.</p><p>Theorem 5.5. Let P be a protocol in FI n n−1 that solves k-set agreement. Then k n.</p><p>Proof. Suppose by contradiction that k &lt; n. <ref type="figure" target="#fig_14">(3, 3)</ref>, . . . (n, n)} ∈ I and set A = P (S n−1 ) ⊂ I which is a simplicial subcomplex of I. Let B ⊂ O be defined to contain sets of the form {(j 1 , y 1 ), (j 2 , y 2 ), . . . , (j r , y r )} ∈ O</p><formula xml:id="formula_54">Let S n−1 = {(1, 1), (2, 2),</formula><p>(5.18) where 1 y n for all 1 r.</p><p>Define π : B → A by π(j, y) = (y, y). Let σ : C(I) → C(P) be a chain map that is carried by S → P(S) (Theorem 5.1(1)). Now set φ = π # • δ # • σ : C(A) → C(A) and Σ : A → P (A), Σ(S) = P (S). Σ is an acyclic carrier. It is obvious that Σ carries φ.</p><p>Theorem 5.1(2) now implies that φ = id C(A) . But since the simplex S n−1 = {(1, 1), (2, 2), . . . , (n, n)} does not occur in the image of φ because k &lt; n, we derive a contradiction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Summary</head><p>We investigated two applications of topology to problems in distributed computing. These were impossibility proofs of (a) consensus in a number of 1-resilient systems and (b) k-set agreement in asynchronous k-resilient systems. For this, we used meth- ods from (a) point-set topology and (b) algebraic topology.</p><p>Point-set topology helped us in providing a way of reasoning about execution trees in a unified way to prove impossibility of consensus. We regarded an execution as a sequence of configurations and equipped the sequence space of all possible executions with a metric which had the property that those executions are close together which share a long common prefix. We then used schedulers to pass to a closed (hence compact) subspace of the space of all executions. This subspace satisfied the precon- dition of Lebesgue's lemma which provided a uniform step bound after which every configuration is univalent. A model-dependent analysis of configuration similarity then concluded the impossibility proofs.</p><p>Algebraic topology, in particular homology, was introduced to examine simplicial complexes. To utilize this, we considered input and output complexes of decision tasks and configuration complexes of protocols (algorithms). The function that maps input simplices to the complex of possible final configurations starting from it turned out to be an acyclic carrier. This was then used to derive the impossibility of wait-free k-set consensus, following <ref type="bibr" target="#b9">Herlihy and Shavit (1993)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Topological Prerequisites</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1. Motivation and Examples</head><p>Topology <ref type="bibr" target="#b2">(Bourbaki 1989</ref>) is the mathematical discipline that explores the concept of "closeness" and emerging notions. Fundamental is the notion of "neighborhood". Informally speaking, a topological space is a set together with a structure on this set that specifies which points (elements of the set) are close to each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1.1. Distances</head><p>Topological spaces (though in disguise) are actually encountered in every beginning calculus class. More specifically, the real line R is a topological space and many of its famous properties are in fact of topological nature. The following example shall exemplify how specific topological concepts might look like.</p><p>Example A.1 (The real line). The dominant and natural notion of closeness depends on the definition of distance between two real numbers. For real numbers x and y, their distance is defined as d(x, y) = |x − y| (A.1) (see <ref type="figure">Figure A.</ref>1), where |z| denotes the absolute value of z. Starting from this definition, we may now state what it means for real numbers to be close to each other. We may call x and y to be ε-close if their distance satisfies</p><formula xml:id="formula_55">d(x, y) &lt; ε (A.2)</formula><p>where ε is some positive number. So, for every ε, we get a different notion of closeness. Of course, these notions are not independent of each other. The most important dependencies are:</p><p>(1) The only point that is ε-close to x for all ε, is x itself.</p><p>(2) If x is ε-close to y, then y is also ε-close to x.</p><p>(3) If x and z are ε-close and z and y are ε-close, then x and y are 2ε-close.</p><p>We will later see how these properties generalize to the formal definition of a topology.</p><p>We have already discussed an easy but important (topological) property of the real line; above property (1): For any two distinct real numbers x and y, there exists , 4} are the so-called separation axioms for topological spaces.) But R satisfies even more: it is a T 2 or Hausdorff space. In subsequent sections, we will define for any topological space what it means to be of this important class of spaces, i.e., to be Hausdorff and show some of their convenient properties.</p><p>We observe that we may define the notion of ε-closeness on any set that, as in the previous example, has a distance function d defined on it. This generalization leads to the definition of metric spaces which lie in the class of topological spaces. But before we formally define this, we look at a slight generalization of Example A.1, namely the Euclidean spaces R n , and discuss in more detail the topological structure and properties that these spaces carry.</p><p>Example A.2 (Euclidean spaces). As an analogue of the real absolute value, we have the norm of a vector x ∈ R n :</p><formula xml:id="formula_56">  =   x 1 . . .   = x 2 1 + x 2 2 + · · · + x 2 n (A.3) x n</formula><p>Thus, the distance of two vectors x and y in R n is defined as</p><formula xml:id="formula_57">d(x, y) = − y . (A.4)</formula><p>The three properties of Example A.1 still hold. Property (3), also known as the triangle inequality, is depicted in <ref type="figure">Figure A.</ref>2. Its name comes from the fact that in a triangle, the length of any edge is less than the sum of lengths of the other two.</p><p>The ε-neighborhood of a point x is the set of all points that are ε-close to x. It is also called a ball with center x and radius ε and is denoted by B ε (x). Now, an open set is a set X ⊂ R n such that, for every x ∈ X, there exists an ε-neighborhood of x that is contained in X. Intuitively, an open set is a set that has "a little room" around every of its points, i.e., it does not have a "sharp boundary". The situation is sketched below in <ref type="figure">Figure A</ref> We note that every ε-ball in R 1 is of the form (x − ε, x + ε), hence an open interval, hence open. This is part of a more general principle.</p><p>(2) In R n , we may also define "open intervals" by setting</p><formula xml:id="formula_58">n (a, b) = (a ι , b ι ) = {x ∈ R n | a ι &lt; x ι &lt; b ι for every 1 ι n}. (A.7) ι=1</formula><p>Similar to the above case, we may choose <ref type="bibr">.8)</ref> and arrive at the insight that these open intervals are also open sets in the topological sense. Again, we may allow for the a ι and b ι to be infinity (positive or negative).</p><formula xml:id="formula_59">ε = min{|x 1 − a 1 | , |b 1 − x 1 | , . . . , |x n − a n | , |b n − x n |} (A</formula><p>Contrary to the above, however, it is not the case that every ε-ball in R n is an open interval, i.e., of the form (a, b) for some a, b ∈ R n . But nonetheless, ε-balls are always open as we will see next.</p><p>(3) ε-neighborhoods in R n are open. This fact is due to the triangle inequality which we already discussed above. Let x ∈ R n be any point and r &gt; 0 any radius. We will show that the ball</p><formula xml:id="formula_60">B r (x) = {y ∈ R n | − x &lt; r} (A.9)</formula><p>is open in R n : Let y ∈ B r (x). Choose ε = r − − x It remains to show that B ε (y) is a subset of B r (x). So, let z ∈ B ε (y), i.e.,</p><formula xml:id="formula_61">− y &lt; r − − x . (A.10)</formula><p>Then, by the triangle inequality and (A.10),</p><formula xml:id="formula_62">− x − y + − x &lt; (r − − x + − x = r (A.11)</formula><p>and we are done, because this implies z ∈ B r (x). The proof is pictured in We have defined the notion of an open set in Euclidean spaces and identified some important classes of sets to be open. In the following, we will generalize the ideas of this example to spaces that are equipped with some way of measuring distances. These spaces are known as metric spaces.</p><p>Metric spaces are an immediate generalization of Euclidean spaces. As with any generalization, the idea is to purposely ignore certain aspects and properties of the object in question and focus on just a very limited number of properties that these objects have in common. In our case, the important notion that generalizes Euclidean spaces to metric spaces is that of distance. The idea is to forget everything we know about the Euclidean norm except that we may use it to define the distance of two points x and y by taking the norm of their difference. Thus, we take the entity "norm" and build a new machine out of it: A machine that takes two points as input and outputs a number -their distance d(x, y).</p><p>After identifying a notion that lends itself to generalization, it is crucial to work out which basic properties have to be attributed to it such that one can define the notion by means of these properties. We already have listed these properties for our case: Properties (1), (2), (3) from Example A.1 which we will use in the following definition.</p><p>Definition A.1. Let X be a non-empty set and d : X × X → [0, ∞) a function with the following properties. </p><formula xml:id="formula_63">= y (M2) d(x, y) = d(y, x) for all x, y ∈ X (M3) d(x, z) d(x, y) + d(y, z) for all x, y, z ∈ X</formula><p>Then we call d a metric on X and X a metric space.</p><p>It will be the purpose of the next example to explore some properties of such spaces. Note that metric spaces are an important special case of topological spaces. In particular, execution spaces which will deliver our main results are in fact metric spaces.</p><p>Example A.3 (Metric spaces). Let X denote a metric space throughout this exam- ple. An ε-ball around x ∈ X is again defined as</p><formula xml:id="formula_64">B ε (x) = {y ∈ X | d(x, y) &lt; ε}.</formula><p>(A.12)</p><p>We also repeat the definition of an open set: A set A ⊂ X is called open if for every x ∈ A, there exists some ε &gt; 0 such that B ε (x) ⊂ A. We could now repeat the proof of the fact that every ε-ball is open from the previous example basically word-by-word. But instead, we will explore properties that are a bit more advanced.</p><p>Let us begin by proving that every union of open sets is again open: Let A ι be open sets for every ι in some non-empty index set I and denote their set-theoretic union by A. We will show that A is open. For every x ∈ A, by the definition of union, there exists some ι 0 such that x ∈ A ι 0 . Now, because A ι 0 is open, there exists some ε &gt; 0 such that B ε (x) ⊂ A ι 0 . But A ι 0 ⊂ A means that we are done.</p><p>In particular, every union of balls is open. What is interesting now, is that the converse also holds true: Every open set is a union of balls. To prove this, let A be an open set. For any x ∈ A, denote by ε x some positive number such that B εx (x) ⊂ A. By definition of openness of A, these numbers do exist. We claim that</p><formula xml:id="formula_65">A = B εx (x). (A.13) x∈A</formula><p>It is clear that A is contained in the right-hand side of (A.13), because x is contained in any ball around itself that has positive radius. For the opposing direction, note that any ball that appears in the union is a subset of A by construction. Hence the union itself is a subset of A, which concludes the proof. We have just glanced at a very important notion: that of a basis of a topology. With this notion, we can express the last result as: The balls form a basis of the topology that is induced by the metric. </p><formula xml:id="formula_66">∞ (−∞, 1/k) = x ∈ R | x &lt; 1 k for all k ∈ N = (−∞, 0] (A.14) k=1</formula><p>is not. A finite intersection of open sets, however, is indeed again open as the following reasoning shows: Let A 1 , A 2 , . . . , A k be open sets and let A denote their set-theoretic intersection. We will show that A is open. So, as always, let x ∈ A. Since the A j are all open, there exist ε 1 , ε 2 , . . . , ε k such that B ε j (x) ⊂ A j for all 1 j k. We set ε = min{ε 1 , ε 2 , . . . , ε k }. But then B ε (x) ⊂ B ε j (x) for every j and hence B ε (x) ⊂ A by definition of A.</p><p>By inspection of the preceding proof, we find the reason why it does not work in the case of infinitely many sets: The infimum of infinitely many positive numbers need not be positive. And this is exactly what happened in our counterexample: If we choose x = 0, then the maximal possible ε k such that B ε k (0) is contained in (−∞, 1/k) is equal to 1/k. If we now try to set ε as in the proof above, we get</p><formula xml:id="formula_67">ε = inf{ε k | k ∈ N} = inf{1/k | k ∈ N} = 0 (A.15)</formula><p>which is not an admissible radius in the definition of openness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1.2. Compactness in R n</head><p>This subsection introduces the concept of compactness in the special case of the Euclidean spaces R n and tries to communicate a bit of its importance in topology.</p><p>Compactness is a property of a subset of a topological space that can "make local things global". An example for this would be the well-known theorem "A continuous real function defined on the interval [a, b] is uniformly continuous". Here, the set [a, b] is compact, continuity is a local property and uniform continuity is a global property. We start with the Definition A.2. A set C ⊂ R n is compact if it is bounded (i.e., there some ball with radius R &gt; 0 that contains C) and its complement is an open set.</p><p>The most important property of compact sets is the following Theorem whose proof's insight-length ratio is too low to demonstrate it here.</p><p>Theorem A.1 (Heine-Borel). Let C ⊂ R n be compact. Further, let A ι be a family of open sets, indexed by some set I, that covers C, i.e.,</p><formula xml:id="formula_68">C ⊂ A ι (A.16) ι∈I</formula><p>Then there exists some finite subfamily A ι 1 , A ι 2 , . . . , A ι k that covers C, i.e.,</p><formula xml:id="formula_69">k C ⊂ A ι j (A.17) j=1</formula><p>This theorem can also hold as a definition of compactness: A subset of R n is compact if and only if it satisfies the condition of Theorem A.1. The opposing direction is not too hard to prove and is demonstrated in order to get some feeling with the condition of Theorem A.1.</p><p>Lemma A.1. Let C ⊂ R n satisfy the condition of Theorem A.1, i.e., for every family of open sets that covers C, there exists a finite subfamily that covers C. Then C is compact.</p><p>Proof. We have to show that (1) C is bounded (i.e., there exists some real R &gt; 0 such that C ⊂ B R (0)) and (2) its complement R n \ C is open.</p><p>To prove (1), we choose the following family of open sets: The family of all balls B r (0) where r &gt; 0 is a real number. We already know that these are open. Of course, C is covered by this family of sets, because every x ∈ C is contained in the ball B 2 (0) for obvious reasons. By hypothesis now, there exists a finite subfamily B r 1 (0), B r 2 (0), . . . , B r k (0) that covers C. But these balls are subsets of the ball B R (0) where R = max{r 1 , r 2 , . . . , r k }. Hence</p><formula xml:id="formula_70">k C ⊂ B r j (0) ⊂ B R (0). (A.18) j=1</formula><p>For <ref type="formula">(2)</ref>, we have to show that R n \ C is an open set. So let x ∈ R n \ C. We define for every ε &gt; 0 the following set <ref type="bibr">.19)</ref> In order to use the condition of Theorem A.1, we have to prove that (a) all D ε are open and (b) C is covered by the D ε .</p><formula xml:id="formula_71">D ε = {y ∈ R n | d(x, y) &gt; ε} . (A</formula><p>Part (a) follows from the triangle inequality: Let y ∈ D ε , i.e., d(x, y) &gt; ε. We have to find some δ &gt; 0 such that d(x, z) &gt; ε for all z with d(y, z) &lt; δ. We claim that this is satisfied by</p><formula xml:id="formula_72">δ = d(x, y) − ε. Let d(y, z) &lt; d(x, y) − ε, then d(x, z) d(x, y) − d(y, z) &gt; d(x, y) − (d(x, y) − ε) = ε, (A.20) hence D ε is open. Part (b) is obvious.</formula><p>By hypothesis, there exist</p><formula xml:id="formula_73">ε 1 , ε 2 , . . . , ε k such that C ⊂ k j=1 D ε j . By setting ε = min{ε 1 , ε 2 , . . . , ε k } &gt; 0, we have C ⊂ D ε and thus B ε (x) ⊂ R n \ D ε ⊂ R n \ C (A.21) which shows that R n \ C is open.</formula><p>It is hoped that this proof has created some insight on the nature of the condition of Theorem A.1. Most important and a major source of misunderstandings is the following triviality: The condition does not claim that there has to exist some finite family of open sets that covers C. This would be trivially fulfilled by any set since R n as a subset of itself is an open set and covers any other. The condition reads that any open covering of C, no matter how ugly it might look like, has to have a finite subcovering. This observation is of utmost importance.</p><p>We will now proceed by showing the result announced in the introduction to this subsection whose proof exemplifies the routinely used reasoning known as "compact- ness argument". For this, we recall some basic definitions from calculus.</p><p>Definition A.3 (Continuity). Let U be a subset of R and f : U → R a function. The function f is called continuous at a point x ∈ U if the following condition is satisfied: For every ε &gt; 0 there exists some δ &gt; 0 such that x ∈ U and |x − x | &lt; δ implies |f (x) − f (x )| &lt; ε. The function f is called continuous if f is continuous at every point x ∈ U .</p><p>Definition A.4 (Uniform continuity). Let U be a subset of R and f : U → R a function. The function f is called uniformly continuous if the following condition is satisfied: For every ε &gt; 0 exists some δ &gt; 0 such that x, x ∈ U and |x − x | &lt; δ implies |f (x) − f (x )| &lt; ε.</p><p>Of course, uniform continuity implies continuity, but the converse is not true in general as the example U = R and f (x) = x 2 shows. Our goal for now, however, will be to show that the converse does hold in a special case, namely that of compact intervals. The set of compact real intervals is quite easy to determine: It is exactly the set of bounded closed intervals <ref type="bibr">[a, b]</ref>. The following proof is a most prototypical compactness argument. Proof. We will use Theorem A.1. Let ε &gt; 0. Since f is continuous, there exists a <ref type="bibr">.22)</ref> x∈ <ref type="bibr">[a,b]</ref> which means that the family B δx (x) is an open covering of the interval <ref type="bibr">[a, b]</ref>. By Theorem A.1, there exist</p><formula xml:id="formula_74">δ x &gt; 0 for every x ∈ [a, b] such that |x − x | &lt; δ x implies |f (x) − f (x )| &lt; ε/2. The condition |x − x | &lt; δ x can be reformulated as x ∈ B δx (x). Since every δ x is greater than zero, we have [a, b] ⊂ B δx/2 (x) (A</formula><formula xml:id="formula_75">x 1 , x 2 , . . . , x k such that k [a, b] ⊂ B δx j /2 (x j ). (A.23) j=1</formula><p>Let δ j = δ x j . If we now set δ = min{δ 1 , δ 2 , . . . , δ k }/2, we are done:</p><p>Let x, x ∈ [a, b] and |x − x | &lt; δ. There exists some j such that x ∈ B δ j /2 (x j ). By the triangle inequality, x, x ∈ B δ (x) ⊂ B δ j /2 (x) ⊂ B δ j (x j ). We can hence use the definition of δ j and conclude</p><formula xml:id="formula_76">f (x) − f (x ) |f (x) − f (x j )| + f (x j ) − f (x ) &lt; ε 2 + ε 2 = ε. (A.24)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2. Topologies</head><p>This section formally defines the notion "topology" resp. "topological space" and introduces basic properties.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2.1. Open Sets and Neighborhoods</head><p>Without further ado, finally, the fundamental Definition A.5 (Topological space). Let X be a non-empty set. A set T ⊂ P (X) is called a topology on X if it satisfies the following properties. To be precise, property (O3) could be omitted from the definition since ∅ = ∅ and ∅ = X by convention.</p><p>This definition is indeed a generalization of the notion of openness as defined in Section A.1. We have defined the notion of openness two times now: One time in the language of metric spaces and one time in the language of topological spaces. We also mentioned that every metric space is also a topological space. This can be done, given a metric d on the space X, by the following definition:</p><formula xml:id="formula_77">T = {O ⊂ X | for every x ∈ O there is some ε &gt; 0 such that B ε (x) ⊂ O} (A.25)</formula><p>We proved in the language of metric spaces <ref type="formula">(O1)</ref>  Example A.4. We will now give some examples of topologies in simple settings.</p><p>(1) The trivial topology exists on any non-empty set X. It is defined as T = {∅, X}.</p><p>(2) The discrete topology also exists on any non-empty set X. It is defined as T = P (X), i.e., the power set of X. In Section A.1, we gave a number of examples of open sets, in particular we showed that specific sets that we called "neighborhoods" or "balls" are open. We will now generalize the notion of neighborhood and show some fundamental properties. Definition A.6 (Neighborhood). Let X be a topological space and x ∈ X. A set N ⊂ X is called a neighborhood of x if there exists an open set O ⊂ X such that x ∈ O and O is contained in N , i.e., O ⊂ N . We will denote the set of all neighborhoods of x by N (x).{∅, X}, {∅, {a}, X}, {∅, {b}, X}, {∅, {c}, X}, {∅, {a, b}, X}, {∅, {a, c}, X}, {∅, {b, c}, X}, {∅, {a}, {b, c}, X}, {∅, {b}, {a, c}, X}, {∅, {c}, {a, b}, X}, {∅, {a}, {a, b}, X}, {∅, {b}, {a, b}, X}, {∅, {a}, {a, c}, X}, {∅, {c}, {a, c}, X}, {∅, {b}, {b, c}, X}, {∅, {c}, {b, c}, X}, {∅, {a}, {b}, {a, b}, X}, {∅, {b}, {c}, {b, c}, X}, {∅, {a}, {c}, {a, c}, X}, {∅, {a}, {a, b}, {a, c}, X}, {∅, {b}, {a, b}, {b, c}, X}, {∅, {c}, {a, c}, {b, c}, X}, {∅, {a}, {b}, {a, b}, {b, c}, X}, {∅, {b}, {c}, {a, b}, {b, c}, X}, {∅, {a}, {c}, {a, c}, {b, c}, X}, {∅, {b}, {c}, {a, c}, {b, c}, X}, {∅, {a}, {b}, {a, b}, {a, c}, X}, {∅, {a}, {c}, {a, b}, {a, c}, X}, {∅, {a}, {b}, {c}, {a, b}, {b, c}, {a, c}, X} We note that, in particular, every open set is neighborhood of any of its points. Simple consequences of the definition are:</p><p>(1) If N ∈ N (x) and M ⊃ N , then M ∈ N (x). In particular, every union of neighborhoods of x is a neighborhood of x.</p><p>(2) Every finite intersection of neighborhoods of x is a neighborhood of x.</p><p>(3) x ∈ N for all N ∈ N (x).</p><p>Properties (1) and (2) justify the name neighborhood filter for the set N (x). A less trivial result is the following.</p><p>(4) For every N ∈ N (x) there exists some M ∈ N (x) such that N ∈ N (y) for all y ∈ M , i.e., N is is a neighborhood of all points in M .</p><p>Of course, any such M has to be a subset of N . It is sufficient to take M to be the open set containing x as demanded in the definition of a neighborhood. In fact, it is possible to take the notion of neighborhood as the primary notion in the definition of a topology, as opposed to taking the notion of openness as we did in Definition A.5. More precisely, open sets are characterized as being those sets that are neighborhoods of all their points. This allows to define the notion of an open set in terms of neighborhoods. Now, given a family N (x) indexed by x ∈ X with the above properties (1) to (4), we may define the family <ref type="bibr">.27)</ref> which, because the N (x) satisfy properties (1) to (4), is a topology on X such that N (x) is exactly the set of neighborhoods of x with respect to this topology T .</p><formula xml:id="formula_78">T = {O ⊂ X | O ∈ N (x) for all x ∈ X} (A</formula><p>Example A.5 (Neighborhoods in metric spaces). Let X be a metric space and x ∈ X. We will characterize the set N (x) ⊂ P (X), more precisely we show</p><formula xml:id="formula_79">N (x) = {N ∈ P (X) | there exists some ε &gt; 0 such that B ε (x) ⊂ N } . (A.28)</formula><p>Let N be a neighborhood of x. We want to show that N is an element of the right-hand side of (A.28 We will now define what it means for a sequence in X to converge to a point.</p><p>Definition A.7 (Convergence). Let X be a topological space and (x k ) k∈N ∈ X N a sequence in X. We say that (x k ) converges to the point x ∈ X if for every neighbor- hood N of x, there exists some integer K ∈ N such that for every k K, x k ∈ N . In this case, x is called limit point of (x n ) and (x n ) is called convergent.</p><p>Compare this definition to the definition of convergence in metric spaces: The sequence (x k ) converges to x if "for all ε &gt; 0 there exists some integer K ∈ N such that for every k K, x k ∈ B ε (x)". The generalization of Definition A.7 is that the prototypical neighborhoods B ε (x) were replaced by arbitrary neighborhoods of x.</p><p>One fact we recall from Example A.3 is that in the case of a metric space X, every open set is the union of ε-balls. In such a case, we call the set of ε-balls a basis of the topology. More specifically, a basis B of a topology T on X is a set of subsets of X such that every open set O ∈ T is a union of elements of B. Trivially, the topology itself is always a basis. A special case occurs when there exists a countable basis B of a topology. These spaces are called second countable or AA2 spaces. Euclidean spaces R n have a basis consisting of the ε-balls. But they even are AA2 spaces since the set of balls with rational radius and rational center also form a basis of the Euclidean topology, i.e.,</p><formula xml:id="formula_80">B = {B ε (x) ⊂ R n | x ∈ Q n and ε ∈ Q ∩ (0, ∞)} . (A.29)</formula><p>This set B is countable by Cantor diagonalization.</p><p>AA2 spaces are spaces in which it suffices to use the term "sequence", i.e., a mapping N → X, when talking about convergence. In other spaces it might be too restrictive for its notion of convergence that the domain N of the sequence is just countable. We would have to generalize sequences to either nets or filters, the former being mappings Λ → X where Λ is not necessarily countable, but has to carry an additional structure; that of a directed set 1 . If this is not done, popular theorems such as "A map F : X → Y is continuous if and only if for each sequence x k in X converging to x, the sequence f (x k ) converges to f (x)" would be plainly false. It is true in any topological space, however, if the word "sequence" is replaced by "net". But the introduction of this generalization has a few complications attached to it. For example, it need not be the case that a net has only one limit, but it may have multiple. There even exist nets that converge to every point in the space. Nevertheless, we will not take on the endeavor to explore the theory in this direction since the spaces we will look at do not have this inconvenience.</p><p>We call a topological space Hausdorff if for every two distinct points x and y, there exist neighborhoods N x and N y of x and y, respectively, such that N x ∩N y = ∅. Metric spaces are Hausdorff.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2.2. Closure, Interior, Boundary, Density</head><p>This subsection introduces accompanying notions for talking about topological spaces.</p><p>Definition A.8 (Closure). Let X be a topological space. A set A ⊂ X is called closed if it is the complement of an open set, i.e., if X \ A is open. The closure of a set B ⊂ X, denoted by B, is the least (with respect to set inclusion) closed set that contains B as a subset.</p><p>The first question that arises here is, of course, whether the notion of closure is indeed well-defined. To be more precise, the question is whether there does exist a least closed set that contains B for every B ⊂ X. Before we answer this question in the affirmative, we collect some simple facts:</p><p>Lemma A.2. Let X be a topological space. The following assertions are true.</p><p>(1) Every finite union of closed sets is closed.</p><p>(2) Every intersection of closed sets is closed.</p><p>(3) ∅ and X are both closed.</p><p>Proof. We show (1): Let A 1 , A 2 , . . . , A n be closed sets, i.e., the X \ A j are open. With use of De Morgans law,</p><formula xml:id="formula_81">n n X \ A j = X \ A j (A.30) j=1 j=1</formula><p>which is open by defining property (O2).</p><p>Part (2) is proved just as easy. Let A i be an arbitrary family of closed set indexed by i ∈ I. Again, De Morgans law yields <ref type="bibr">.31)</ref> i∈I i∈I and property (O1) tells that we are done.</p><formula xml:id="formula_82">X \ A i = X \ A i (A</formula><p>The sets ∅ and X are closed since they are open and each other's complement.</p><p>Note the duality of these assertions and the condition on open sets in the definition of a topology. It is possible to define the notion of a topology by defining what sets should be closed, as opposed to defining what sets should be open as in Definition A.5. The properties that a family of sets has to fulfill such that it appears as the family of closed sets of some topology are exactly the assertions of Lemma A.2.</p><p>The question whether the notion of closure is actually well-defined for any set B ⊂ X follows from the fact every intersection of closed sets is again closed. More precisely, B = {A ⊂ X | A is closed and B ⊂ A} , (A.32)</p><p>i.e., the closure of B is equal to the intersection of all closed sets A that contain B. The set on right-hand side of (A.32) is closed by (2) of Lemma A.2 and is of course contained in every other closed set by definition of intersection. Hence we constructed B for every B ⊂ X.</p><p>For spaces in which sequences suffice to build a proper notion of convergence, in particular in AA2 spaces (see Section A.2.1), the following important characterization of closure holds:</p><p>Lemma A.3. Let X be an AA2 space and B ⊂ X. Then the closure of B is equal to the set of limit points that sequences in B have, i.e.,</p><formula xml:id="formula_83">B = x ∈ X | there exists a sequence (x k ) k∈N ∈ B N with x k → x . (A.33)</formula><p>Proof. We first prove that B is contained in the right-hand side R. It suffices to show that the right-hand side is closed and contains B as a subset. The latter claim is clear since every x ∈ B is limit of the constant sequence (x) k∈N . We show closedness by contradiction. Suppose that X \ R is not open. Then, by definition, there exists some x ∈ X \ R such that for every neighborhood N of x, we have N ∩ R = ∅. We will construct a sequence of points in B that converges to x, deriving the desired contradiction.</p><p>In a first step, we will show that there exists a sequence of points in R that converges to x and then show how this implies the claim. By hypothesis, there exists some countable basis B of the topology. Let (N k ) k∈N denote the family of basis sets that contain x. It is easy to show that for every neighborhood N of x, there exists a k ∈ N such that N k ⊂ N . Now, for every k ∈ N, let x k be an arbitrary point in R ∩ k i=1 N i (which is non-empty, see above). This is a sequence of points in R that converges to x. For let N ∈ N (x), then there exists some K ∈ N such that N K ⊂ N . Hence for any k K, we have</p><formula xml:id="formula_84">x k ∈ k i=1 N i ⊂ N K ⊂ N which shows x k → x.</formula><p>To show that the existence of a sequence in R converging to x implies the existence of a sequence in B converging to x, we take for every point x k ∈ R from the above construction a sequence (ξ k,j ) j∈N ∈ B N converging to x k . These sequences exist by the definition of R. We claim that the following sequence y k converges to x. The set k i=1 N i containing x k and being open, there exists some index j k ∈ N such that for</p><formula xml:id="formula_85">all j j k , ξ k,j ∈ k i=1 N i . We define k y k = ξ k,j k ∈ B ∩ N i (A.34) i=1</formula><p>which obviously converges to x. This is a contradiction and we have shown B ⊂ R.</p><p>The converse direction R ⊂ B is much easier. Suppose that there exists some x ∈ R \ B. Because x lies in the open set X \ B, there exists some neighborhood N of x such that <ref type="bibr">(A.35)</ref> But this relation denies the existence of a sequence in B converging to x, which contradicts the assumption.</p><formula xml:id="formula_86">N ⊂ X \ B ⊂ X \ B.</formula><p>It is also possible to define a topological space in terms of its closure operator, i.e., the map P (X) → P (X) that takes a set A ⊂ X to its closure. We can retain the topology from the closure operator, because a set A ⊂ X is closed if and only if A = A. The axioms needed to define the family of closed sets of a topology by the above procedure are the following:</p><p>Lemma A.4. Let X be a topological space and let C : P (X) → P (X) be its closure operator. The following assertions are true for any A, B ⊂ X: Dual to the notion of closure is that of interior, as defined next. Definition A.9 (Interior). Let X be a topological space and A ⊂ X. We call the (with respect to set inclusion) greatest open set that is contained in A the interior of A, denoted by A • .</p><p>As with closure, we have to check that this is a well-defined notion, i.e., that A • exists for all A ⊂ X. This follows from the formula Lemma A.5. Let X be a topological space and let I : P (X) → P (X) be its interior operator. The following assertions are true for any A, B ⊂ X:</p><p>(1) I(X) = X We may generalize this situation and identify for any set A ⊂ X a set of points for which it does not matter whether they are added or removed when considering interior and closure.</p><p>Definition A.10 (Boundary). Let X be a topological space and A ⊂ X. We call ∂A = A \ A • the boundary of A.</p><p>We state the following observations. Lemma A.6. Let X be a topological space and let A ⊂ X. The following statements are true. (6) and <ref type="formula">(7)</ref> are simple calculations.</p><p>We now turn to a different notion that is derived from the notion of closure, namely density. Informally, we will call a set dense if every point in the space is arbitrarily close to a point of the dense set. The formal definition follows now.</p><p>Definition A.11 (Density). Let X be a topological space and A ⊂ X. We call A dense in X if the closure of A in X is equal to X, i.e., A = X.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Equivalent statements are summarized in the next</head><p>Lemma A.7. Let X be a topological space and A ⊂ X. The following statements are equivalent:</p><p>(1) A is dense in X. Example A.7. The set Q ⊂ R is dense: Let N ⊂ R be a neighborhood of some x ∈ R. Then, by definition, there exists some ε &gt; 0 such that B ε (x) ⊂ N . The decimal expansion of x yields a sequence (q k ) that converges to x. This implies that there exists some K ∈ N such that q K ∈ B ε (x) ⊂ N . The claim follows because, by construction, q K ∈ Q.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2.3. Continuity</head><p>In the previous sections, we studied the objects "topological spaces". It is the purpose of this section to deal with "morphisms" of such objects, i.e., functions between topological spaces that preserve the topological structure. We will then have laid the ground to study the category of topological spaces <ref type="bibr" target="#b10">(Herrlich and Strecker 1973)</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2.4. Compactness</head><p>We briefly discussed compactness in Section A.1.2 for the case of subsets of R n . Since we do not have the notion of distance and hence boundedness in general topolog- ical spaces, the idea is to take the conclusion of Theorem A.1 as the definition of compactness. Below, we collect the most important facts about compact sets.</p><p>Definition A.13 (Compactness). Let X be a topological space. We call X compact if for any collection (A ι ) ι∈I of open sets for which X = A ι , there exists some n ∈ N and ι 1 , . . . , ι n such that X = n k=1 A ι k . We call a subset A of a topological space compact if A is compact with respect to the subspace topology inherited from X.</p><p>Example A.10. A space equipped with the discrete topology is compact if and only if it is finite. This follows easily because all singleton sets {x} are open in discrete spaces.</p><p>Lemma A.9. Let X be a topological space and A ⊂ X. The following assertions are true:</p><p>(1) If X is compact and A is closed, then A is compact.</p><p>(2) If X is Hausdorff and A is compact, then A is closed.</p><p>Proof. (1): For any open cover (A ι ) of A, the family (A ι ) together with the open set X \ A is an open cover of X. Since X is compact, there exist finitely many indices ι 1 , . . . , ι n such that X = n k=1 A ι k ∪ (X \ A). By intersecting both sides with A, we arrive at A = n k=1 A ι k which shows that A is compact. (2): We show that the complement of A is open. Let x ∈ X \ A. By the Hausdorff property, for every y ∈ A, there exist disjoint open sets U (y) and V (y) such that y ∈ U (y) and x ∈ V (y). The family U (y) where y ∈ A is an open covering of A. Because A is compact, there exist y 1 , . . . , y n such that A = n i=1 U (y i ). Setting V = n i=1 V (y i ) reveals that V is an open neighborhood of x ((O2) in Definition A.5) which is disjoint to A, hence V ⊂ X \ A. This proves that X \ A is open, i.e., A is closed.</p><p>Lemma A.10. Let f : X → Y be continuous and let X be compact. Then f [X] is compact.</p><p>Proof. Follows immediately from the definitions.</p><p>Lemma A.11. Let X be a compact space and f : X → R continuous. Then f attains its minimum, i.e., there exists some x ∈ X such that f (x) = inf{f (y) | y ∈ X}.</p><p>(A.47)</p><p>Proof. By Lemma A.10, the image f [X] is a compact set in R. By Lemma A.9, this set is closed. We may deduce the result from order completeness of R. <ref type="bibr">2</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2.5. Product Spaces</head><p>In this section, we will answer the question, which topology is "natural" to equip a product space X = X ι with when all X ι are topological spaces. We do this by considering the projection mappings π ι : X X ι and equipping X with a slight generalization of the initial topology. Namely, we will have to make all projection mapping continuous, not only one. This is done with the following Definition A.14. Let (X ι ) be a family of topological spaces and let X = X ι be the set-theoretic product. We call the topology induced by sets of the form π −1 ι [O] where O ⊂ X ι is open the product topology on X.</p><p>A most important result that we do not prove here for space limitations is the following <ref type="bibr" target="#b2">(Bourbaki 1989</ref>, Chapter I, §9, no. 5, Theorem 3).</p><p>Theorem A.3 (Tychonoff). Let X = X ι be equipped with the product topology. The following are equivalent:</p><p>(1) X is compact.</p><p>(2) All X ι are compact.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 .Figure 2 .</head><label>22</label><figDesc>Figure 2.1.: Structure of a single computing step</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>3. 2</head><label>2</label><figDesc>k-Set Agreement (T) For every admissible execution holds: Every process that is correct 2 decides on some value. (Termination) (A) For every admissible execution holds: No two correct processes decide on dif- fering values. (Agreement) (V) For every admissible execution holds: If the execution starts from an initial configuration in which all input values are equal to v, then all correct processes decide on v. (Validity)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>(</head><label></label><figDesc>k-A) For every admissible execution holds: No k + 1 correct processes decide to pairwise differing values. (k-Agreement)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>B</head><label></label><figDesc>ε (γ) = B 2 −K (γ) = {γ | γ and γ agree in the first K components}. (4.4) If π m : C ω → C denotes the projection onto the mth component, then the inverse image π −1 m {C m }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4.1.: Mapping from schedules to executions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4.2.: Constructed tree up to depth 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Lemma 4. 7 .</head><label>7</label><figDesc>Let f : X → S be a closed scheduler. The following assertions are true: 4.2 Topological Impossibility (1) If A ⊂ X is closed then f [A] ⊂ S is closed and compact. (2) d(A, B) = 0 implies d(f [A], f [B]) = 0 for all A, B ⊂ X.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Let</head><label></label><figDesc>C and C be configurations in S. If there exist successors D and D of C and C respectively such that D ∼ p D , then C ∼ v C Proof. Suppose not, i.e., without loss of generality C is 0-valent and C is 1-valent. Since C is 0-valent, so is its successor D. By the same token, D is 1-valent. The relation D ∼ p D implies the existence of processes q 1 , q 2 , . . . , q t and configurations D 0 , D 1 , . . . , D t such that D 0 = D, D t = D , and configurations D j−1 and D j differ exactly in the state of process q j . By transitivity of valence similarity, it suffices to show that if D and D differ only in the state of a single process q, then D ∼ v D .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 5 . 1 .</head><label>51</label><figDesc>Figure 5.1.: Commutative diagram for chain complex morphisms</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>2</head><label></label><figDesc>A sequence A f − → B g − → C where A, B, C are Abelian groups and f : A → B, g : B → C are Abelian group morphisms is called exact if im f = ker g.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>we define |f | : |C| → |D| by |f | (α)(w) = α(v). (5.11) f (v)=w</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5.2.: Input Complexes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5.3.: Output Complexes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure A. 1 .</head><label>1</label><figDesc>Figure A.1.: Distances on the real line</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure A. 3 .</head><label>3</label><figDesc>Figure A.2.: Triangle inequality in R 2</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure A. 4 .</head><label>4</label><figDesc>Figure A.4.: ε-balls are open</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>(</head><label></label><figDesc>M1) d(x, y) = 0 holds if and only if x</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>We</head><label></label><figDesc>may now ask, of course, if intersections of open sets are again open. Unfortu- nately, this is not true in general as the following example shows: Let X = R and d(x, y) = |y − x|. The sets A k = (−∞, 1/k) are all open. However, their intersection</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head></head><label></label><figDesc>Figure A.5.: The set (−∞, 0] is not open</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Theorem A. 2</head><label>2</label><figDesc>(Heine-Cantor). Let f : [a, b] → R be a function. If f is continuous, then f is uniformly continuous.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>(</head><label></label><figDesc>O1) Every union of sets in T is an element of T . (O2) Every finite intersection of sets in T is an element of T . (O3) ∅ ∈ T and X ∈ T In this case, X is called a topological space. The sets O ∈ T are called open sets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head></head><label></label><figDesc>that arbitrary unions of open sets are again open and (O2) that finite intersections of open sets are open.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>( 3 )</head><label>3</label><figDesc>On a two-element set X = {a, b}, there are four different topologies, namely {∅, {a, b}}, {∅, {a}, {a, b}}, {∅, {b}, {a, b}}, {∅, {a}, {b}, {a, b}}. (A.26) (4) There are 29 different topologies on a three-element set X = {a, b, c}, see Figure A.6. From there on, it gets complicated: 355 topologies on four-element sets, 6942 on five-element sets, 209527 on six-element sets, 9535241 on seven- element sets, 642779354 on eight-element sets and so on. (5) Any topology in which all singleton sets {x} are open, is the discrete topology by (O1).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Figure A. 6 .</head><label>6</label><figDesc>Figure A.6.: The 29 topologies on the set X = {a, b, c}</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head>( 1 )</head><label>1</label><figDesc>C(∅) = ∅ (2) A ⊂ C(A) (3) C(C(A)) = C(A) (4) C(A ∪ B) = C(A) ∪ C(B) Proof. (1) is clear since ∅ is a closed set. (2) and (3) are immediate consequences of the definition of closure. We will now prove (4). The inclusion C(A ∪ B) ⊂ C(A)∪C(B) is a consequence of the fact that C(A)∪C(B) is closed by Lemma A.2(1) and of course contains both A and B as subsets. For the other inclusion, we note that it is sufficient to show C(A) ⊂ C(A ∪ B) which is clear since A ⊂ A ∪ B.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_25"><head></head><label></label><figDesc>{B ⊂ X | B is open and B ⊂ A} . (A.36) A set A ⊂ X is open if and only if A • = A. The important properties of the interior operator P (X) → P (X), A → A • are:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head>)</head><label></label><figDesc>I(A ∩ B) = I(A) ∩ I(B) Proof. (1) holds because the set X is open by definition, (2) and (3) are obvious. To prove (4), we show both set inclusions. The inclusion from I(A ∩ B) ⊂ I(A) ∩ I(B) is true, because A ∩ B ⊂ A and A ∩ B ⊂ B. We now show I(A) ∩ I(B) ⊂ I(A ∩ B). The set I(A) ∩ I(B) is open and contained in both A and B, hence contained in A ∩ B. The claim now follows from the definition of interior. The notions of closure and interior are connected by the following formula A • = A c c , A = ((A c ) • ) c (A.37) where B c = X \ B denotes the complement of B ⊂ X. Example A.6 (Intervals). We will demonstrate the use of the notions interior and closure with real intervals. The interior and the closure of an interval do not depend on whether the boundary points belong to the interval or not. More precisely, the interiors of (a, b), (a, b], [a, b) and [a, b] are all equal to (a, b) and their closures are all equal to [a, b]. It follows from the fact that (a, b) is open, [a, b] is closed and neither (a, b] nor [a, b) are open or closed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_27"><head>( 1 ))</head><label>1</label><figDesc>∂A = {x ∈ X | for all N ∈ N (x) it is N ∩ A = ∅ and N ∩ A c = ∅} (2) ∂A = ∂(A c ) (3) (A \ ∂A) • = A • (4) A ∪ ∂A = A (5) ∂A is closed (6) A = A ∪ ∂A. In particular, A is closed if and only if ∂A ⊂ A. (7) A • = A \ ∂A. In particular, A is open if and only if ∂A ∩ A = ∅. Proof. (1): From the definition and equation (A.37), we deduce ∂A = A c•c \ A • = A c•c ∩ A •c . It hence suffices to show A •c = {x ∈ X | for all N ∈ N (x) it is N ∩ A c = ∅} . (A.38) But this is trivially equivalent (by taking complements) to A • = {x ∈ X | there exists some N ∈ N (x) such that N ∩ A c = ∅} . (A.39) which is true, because the relation N ∩ A c = ∅ is the same as the relation N ⊂ A. (2) is a trivial consequence of (1). (3): After a simple calculation involving De Morgan's law and R \ S = R ∩ S c , we arrive at the equation (A \ ∂A) • = A ∩ A c ∪ A • • (A.40) which by Lemma A.5(4) is equal to A • ∩ A c ∪ A • • (A.41) Since A • ⊂ A c ∪ A • and A •• = A • , we get (A \ ∂A) • ⊃ A • ∩ A • = A • (A.42) and we are done, the other inclusion being trivial. (4) follows from (2), (3) and (A.37) as the following calculation shows:is clear since ∂A = A ∩ A •c is an intersection of two closed sets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_28"><head>( 2 )</head><label>2</label><figDesc>For every non-empty open set O ⊂ X it follows that A ∩ O = ∅. (3) For every neighborhood N of a point x ∈ X it follows that A ∩ N = ∅. Proof. The equivalence (2)⇔(3) is trivial. Let A be dense and suppose that (2) does not hold. Then there exists a non-empty open set O with A ⊂ O c where O c denotes X \O. But since O c = X and O c is closed, we deduce A = X which is a contradiction. Conversely, let (2) hold and suppose that A = C = X. But then the complement of C is non-empty, open, and has trivial intersection with A. Contradiction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_29"><head>Definition A. 12 (</head><label>12</label><figDesc>Continuity). Let X and Y be topological spaces. Furthermore, let f : X → Y be a function. We call f continuous if for every open set O ⊂ Y , it follows that its inverse image f −1 [O] is open in X. By taking complements and recalling f −1 [Y \ A] = X \ f −1 [A] for all A ⊂ Y , we arrive at the insight that f is continuous if and only if f −1 [C] is closed in X for every set C that is closed in Y . Example A.8. Let X be a set equipped with the discrete topology. Then every map f : X → Y is continuous, because every subset of X is open. Conversely, if Y is equipped with the trivial topology, i.e., only ∅ and Y are open, then again every map f : X → Y is continuous, because f −1 [∅] = ∅ and f −1 [Y ] = X which are in any case open in X.</figDesc></figure>

			<note place="foot" n="2"> Distributed Computing Models 2.3 Omission Failure Model</note>

			<note place="foot" n="1"> Contrary to the asynchronous message passing model, it is no longer necessary to remember the state of the medium in a configuration. This is because every message is received in the same step in which it was sent. See below for the exact step semantics.</note>

			<note place="foot" n="2"> However, there is no delay between performing a write and the time the written value becomes visible to other processes. Thus, message delay δ = 0 in the language of message passing models.</note>

			<note place="foot" n="2"> Distributed Computing Models 2.5 Safety and Liveness</note>

			<note place="foot" n="1"> In reality, this does not make the problem any simpler, just the notation. And since we are doing impossibility results, it suffices to limit ourselves to this special case.</note>

			<note place="foot" n="2"> See descriptions in 2.2.1, 2.3.1 and 2.4.1 for details when a process is considered correct.</note>

			<note place="foot" n="1"> The formal definition of these terms were given in Chapter 2. 2 Executions, in models that we consider, are infinite per definitionem.</note>

			<note place="foot" n="3"> Note that all sets O ⊂ C are open, because we equipped C with the discrete topology (see Example A.4(2)).</note>

			<note place="foot" n="4"> Point-Set Topology 4.1 The Topology of Execution Spaces</note>

			<note place="foot" n="4"> Point-Set Topology 4.1 The Topology of Execution Spaces</note>

			<note place="foot" n="4"> This is very similar to the model of Dolev, Dwork, and Stockmeyer 1987, Theorem I1.1 and a special case of the system model in Section 2.4.</note>

			<note place="foot" n="4"> Point-Set Topology 4.1 The Topology of Execution Spaces</note>

			<note place="foot" n="5"> by uncurrying</note>

			<note place="foot" n="6"> Existence of a bivalent initial configuration is established by a bit-flipping argument. This standard proof technique can be examined in Attiya and Welch 2004, Lemma 5.16. 7 cf. Dolev, Dwork, and Stockmeyer 1987, Lemma I1.1.1</note>

			<note place="foot" n="4"> Point-Set Topology 4.1 The Topology of Execution Spaces</note>

			<note place="foot" n="4"> Point-Set Topology 4.1 The Topology of Execution Spaces</note>

			<note place="foot" n="4"> Point-Set Topology 4.2 Topological Impossibility</note>

			<note place="foot" n="4"> Point-Set Topology 4.2 Topological Impossibility</note>

			<note place="foot" n="8"> We say that register R belongs to process p if p is the sole writer of R.</note>

			<note place="foot" n="4"> Point-Set Topology 4.3 Impossibility Results</note>

			<note place="foot" n="9"> We denote the set of all permutations of {1, 2,. .. , N } by SN. 10 cf. Lemma 4.5</note>

			<note place="foot" n="11"> To be more precise, a permutation τ ∈ SN is called a transposition if there exist 1 i, j N such that i + 1 ≡ j mod N , π|({1,. .. , N } \ {i, j}) is the identity and π|{i, j} is not the identity.</note>

			<note place="foot" n="1"> The kernel of an Abelian group morphism f : A → B is defined to be the set of all a ∈ A with f (a) = 0 and is denoted by ker f. It is ker f an Abelian subgroup of A.</note>

			<note place="foot" n="3"> Let G be the free Abelian group generated by some set S, let H be an Abelian group and let f : S → H be a map. Then there exists a unique morphism ϕ : G → H such that ϕ|S = f .</note>

			<note place="foot" n="1"> A directed set is a set Λ together with a preorder (reflexive and transitive relation) on Λ such that for every λ and µ in Λ, there exists a ν such that λ ν and µ ν.</note>

			<note place="foot">But this implies the condition of (1).</note>

			<note place="foot" n="2"> For every set B ⊂ R which is bounded from below, the infimum of B exists in R.</note>
		</body>
		<back>
			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Defining liveness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Alpern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fred</forename><forename type="middle">B</forename><surname>Bowen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schneider</surname></persName>
		</author>
		<idno>TR85-650</idno>
		<imprint>
			<date type="published" when="1985" />
		</imprint>
		<respStmt>
			<orgName>Cornell University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Distributed Computing: Fundamentals, Simulations, and Advanced Topics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hagit</forename><surname>Attiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jennifer</forename><surname>Welch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">General Topology, Chapters 1-4. Elements of Mathematics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bourbaki</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
	<note>Nicolas (pseudonym)</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Revisiting safety and liveness in the context of failures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernadette</forename><surname>Charron-Bost</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sam</forename><surname>Toueg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anindya</forename><surname>Basu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CONCUR 2000-Concurrency Theory</title>
		<meeting>CONCUR 2000-Concurrency Theory</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="552" to="565" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">On the minimal synchronism needed for distributed consensus</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danny</forename><surname>Dolev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cynthia</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Larry</forename><surname>Stockmeyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="77" to="97" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Hundreds of impossibility results for distributed computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Faith</forename><surname>Fich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Ruppert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Distributed Computing</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="121" to="163" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Impossibility of distributed consensus with one faulty process</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">J</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Nancy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">S</forename><surname>Lynch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Paterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="374" to="382" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allan</forename><forename type="middle">Algebraic</forename><surname>Hatcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Topology</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Algebraic spans</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maurice</forename><surname>Herlihy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergio</forename><surname>Rajsbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Structures in Computer Science</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="549" to="573" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The asynchronous computability theorem for tresilient tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maurice</forename><surname>Herlihy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nir</forename><surname>Shavit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 25th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="111" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Category Theory: An Introduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Horst</forename><surname>Herrlich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><forename type="middle">E</forename><surname>Strecker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1973" />
			<publisher>Allyn and Bacon</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Proving the correctness of multiprocess programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leslie</forename><surname>Lamport</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering SE</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="125" to="143" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Closed schedulers: A novel technique for analyzing asynchronous protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronit</forename><surname>Lubitch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shlomo</forename><surname>Moran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Distributed Computing</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="203" to="210" />
			<date type="published" when="1996" />
			<publisher>Lynch, Nancy A. Distributed Algorithms. Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A layered analysis of consensus</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoram</forename><surname>Moses</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergio</forename><surname>Rajsbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="989" to="1021" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Wait-free k-set agreement is impossible: The topology of public knowledge</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Saks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fotios</forename><surname>Zaharoglou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1449" to="1483" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Time is not a healer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>Santoro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Widmayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Annual Symposium on Theoretical Aspects of Computer Science</title>
		<meeting>the 6th Annual Symposium on Theoretical Aspects of Computer Science</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1989" />
			<biblScope unit="page" from="304" to="313" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edwin</forename><forename type="middle">H Algebraic</forename><surname>Spanier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Topology</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1966" />
			<publisher>McGraw-Hill</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
