<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 C:\Users\Angela\git\grobid\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-12-29T00:16+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Polynomial Combined Rewritings for Linear Existential Rules and DL-Lite with n-ary Relations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Gottlob</surname></persName>
							<email>georg.gottlob@cs.ox.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Oxford</orgName>
								<address>
									<country key="GB">UK</country>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">Introduction</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Manna</surname></persName>
							<email>manna@mat.unical.it</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Calabria</orgName>
								<address>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Pieris</surname></persName>
							<email>pieris@dbai.tuwien.ac.at</email>
							<affiliation key="aff2">
								<orgName type="department">Institute of Information Systems</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Polynomial Combined Rewritings for Linear Existential Rules and DL-Lite with n-ary Relations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Proof Generator</head><p>We assume the reader is familiar with the chase procedure. Recall that the chase for a database D and a set Σ of rules, denoted chase <ref type="bibr">(D, Σ)</ref>, is a universal model of D and Σ, and thus (D ∪ Σ) |= q iff chase(D, Σ) |= q, for each CQ q. The instance chase(D, Σ) can be naturally seen as a directed labeled graph, called chase graph, denoted CG(D, Σ). It is also easy to verify that for linear rules, CG(D, Σ) is a directed forest; for details on the chase, see, e.g., <ref type="bibr">[1]</ref>. Our main technical tool is called proof generator, and it formalizes the intuitive idea that (Boolean) CQ answering under linear rules can be realized as a reachability problem on the chase graph. Let us illustrate the key ideas underlying the proof generator via a simple example. <ref type="figure">{p(a, b, c), p(b, c, d</ref>)}, and let Σ be the set of linear rules (for brevity, the universal quantifiers are omitted):</p><formula xml:id="formula_2">Example 1. Let D =</formula><formula xml:id="formula_3">p(X, Y, Z) → ∃W p(X, W, Y ) p(X, Y, Z) → ∃W p(Z, W, Y ) p(X, Y, Z) → ∃W p(Y, X, W ) p(X, Y, Z) → p(Y, Z, X).</formula><p>Given the BCQ q = ∃A∃B∃C∃D (p(A, a, B) ∧ p(C, B, b) ∧ p <ref type="figure">(D, c, b)</ref>), as shown in <ref type="figure" target="#fig_0">Figure 1(a)</ref>, there exists a homomorphism h (dashed arrows in the <ref type="figure">figure)</ref> that maps q to an initial segment of the chase graph of D and Σ, and thus (D∪Σ) |= q. It is interesting to observe that the nulls occurring in h(q), i.e., z 1 , z 3 , z 4 and z 5 , form a rooted forest F , depicted in <ref type="figure" target="#fig_0">Figure 1(b)</ref>, with the following properties; for brevity, let ν(z) be the atom in CG(D, Σ) where the null z is invented (see shaded atoms in <ref type="figure" target="#fig_0">Figure 1</ref>(a) for ν(z 1 ), ν(z 3 ), ν(z 4 ) and ν(z 5 )): (i) for every root node z, ν(z) is reachable from D; (ii) for every edge (z, w), ν(w) is reachable from ν(z); and (iii) for every atom a ∈ h(q), there exists a unique path π in F that contains all the nulls in a, and, assuming that the leaf node of π is z, a is reachable from ν(z). Indeed, it is easy to verify that ν(z 1 ) and ν(z 5 ) are reachable from D, ν(z 3 ) and ν(z 4 ) are reachable from ν(z 1 ), and finally,</p><formula xml:id="formula_4">h(p(A, a, B)) = p(z 3 , a, z 1 ) is reachable from ν(z 3 ), h(p(C, B, b)) = p(z 4 , z 1 , b) is reachable from ν(z 4 ), and h(p(D, c, b)) = p(z 5 , c, b) is reachable from ν(z 5 ).</formula><p>Roughly speaking, the triple consisting of: (1) the homomorphism h, that maps q to the chase; (2) the function ν, that gives the atoms in the chase where the nulls occurring in h(q) were invented; and (3) the forest F , that encodes how the nulls of h(q) depend on each other, as well as the order of their generation, is what we call a proof generator for q w.r.t. D and Σ. The existence of such a triple, allows us to generate the part of the chase due to which the query is entailed, i.e., the proof of the query (hence the name "proof generator"). Therefore, for query answering purposes under linear rules, we simply need to check if such a proof generator exists. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The Combined Rewriting</head><p>We give a positive answer to our research question regarding linear rules and the poly- nomial combined approach. More precisely, we show that: Theorem 1. The class of linear rules is polynomially combined Q-rewritable, where Q ∈ {FO, NDL}.</p><p>To establish the above theorem, we heavily rely on the notion of the proof generator. Fix a (Boolean) CQ q, a database D, and a set Σ of linear rules. By Lemma 1, it suffices to construct in polynomial time a query q Σ ∈ Q (independently of D), and a database D Σ (independently of q), such that D Σ |= q Σ iff a proof generator for q w.r.t. D and Σ exists. Roughly, the query q Σ guesses a triple (h, ν, F ) (as described in Example 1), and then verifies that the guessed triple is a proof generator for q w.r.t. D and Σ. The interesting part of q Σ is the component that applies the crucial reachability checks required by the definition of the proof generator. Although the path among two atoms in the chase graph may be of exponential size, its existence can be checked via Q-queries of polynomial size. An immediate consequence of Theorem 1 is that:</p><formula xml:id="formula_5">Corollary 1. The description logic DLR-Lite R is polynomially combined Q-rewritable, where Q ∈ {FO, NDL}.</formula><p>The results of this work are, for the moment, of theoretical nature and we do not claim that they will directly lead to better practical algorithms. We believe that a smart implementation of the proposed techniques can lead to more efficient rewriting proce- dures; this will be the subject of future research. We are also planning to optimize the proposed rewriting algorithm, with the aim of constructing queries of optimal size.</p><p>Acknowledgements. G. Gottlob was supported by the EPSRC Programme Grant EP/M025268/ "VADA: Value Added Data Systems -Principles and Architecture". M. Manna was supported by the MIUR project "SI-LAB BA2KNOW -Business Anali- tycs to <ref type="bibr">Know", and</ref><ref type="bibr">by Regione Calabria, programme POR Calabria FESR 2007-2013</ref>, projects "ITravel PLUS" and "KnowRex: Un sistema per il riconoscimento e l'estrazione di conoscenza". A. Pieris was supported by the Austrian Science Fund (FWF): P25207- N23 and Y698. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>References</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Illustration of a proof generator.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Lemma 1 .</head><label>1</label><figDesc>(D ∪ Σ) |= q iff there exists a proof generator for q w.r.t. D and Σ.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>1 .</head><label>1</label><figDesc>Caì ı, A., Gottlob, G., Lukasiewicz, T.: A general Datalog-based framework for tractable query answering over ontologies. J. Web Sem. 14, 57-83 (2012) 2. Gottlob, G., Kikot, S., Kontchakov, R., Podolskii, V.V., Schwentick, T., Zakharyaschev, M.: The price of query rewriting in ontology-based data access. Artif. Intell. 213, 42-59 (2014) 3. Gottlob, G., Manna, M., Pieris, A.: Polynomial combined rewritings for existential rules. In: KR (2014) 4. Gottlob, G., Manna, M., Pieris, A.: Polynomial rewritings for linear existential rules. In: IJCAI (2015) 5. Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach to query answering in DL-Lite. In: KR (2010) 6. Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach to ontology-based data access. In: IJCAI. pp. 2656-2661 (2011) 7. Lutz, C., Toman, D., Wolter, F.: Conjunctive query answering in the description logic EL using a relational database system. In: IJCAI. pp. 2070-2075 (2009)</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
