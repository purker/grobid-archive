<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 C:\Users\Angela\git\grobid\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-12-29T00:16+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Test Case Generation by Grammar-based Fuzzing for Model-driven Engineering</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Magdalena</forename><surname>Widl</surname></persName>
							<email>widl@kr.tuwien.ac.at</email>
							<affiliation key="aff0">
								<orgName type="department">Knowledge-based Systems Group</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Introduction</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Test Case Generation by Grammar-based Fuzzing for Model-driven Engineering</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Grammar-based Fuzzing of Model Evolution Scenarios</head><p>Fuzz testing is a black-box software testing technique based on large amounts of random- ized input data and has been successfully applied in many areas, e.g. in error detection for UNIX applications <ref type="bibr">[1]</ref>. We propose to create randomly generated sequence diagrams and state machines based on a language definition given as metamodel and on a formal specification of the dependencies between the two views. Sequence diagrams model possible communication scenarios between different instances of state machines. A sequence diagram is correct if the messages are totally ordered and the sequence of This work was supported by by the Vienna Science and Technology Fund (WWTF) through project ICT10-018 1 http://www.omg.org/spec/UML/ 2 http://www.eclipse.org/modeling/emf/ received message symbols on each lifeline occurs as path of triggers in the state machine that models its behavior (cf. definitions given in <ref type="bibr">[2]</ref>). Based on the Ecore implementation of the multi-view metamodel presented in <ref type="bibr">[2]</ref>, we first create a state machine view as a set of state machines. Using this view, we create a correct sequence diagram that instantiates the state machines with its lifelines. The number of state machines, upper and lower bounds for the number of both states and transitions, the number of messages, and the number of lifelines are defined as input parameters. The generation of states, transitions, transition labels and the assignment of state machines to lifelines is done at random. When generating the message sequence of a sequence diagram, the following restriction is required to ensure its correctness: the symbol of each message must continue a path of triggers in the state machine modeling the behavior of the lifeline that receives the message. Hence only symbols can be considered that occur on outgoing transitions of states to which the previous message symbol has led. Out of these symbols, one is chosen randomly. We can also generate evolutionary changes to the models: a versioning scenario of a sequence diagram is created by copying the diagram and adding messages.</p><p>Using this approach, we generated 100 instances of the SDM problem with different parameter settings to find errors in and to assess the scalability of our approach presented in <ref type="bibr">[2]</ref>. These tests helped us to find some minor implementation errors and one error in the algorithm solving the SDM problem. With the random instances being much larger than the manual ones, we could also easily identify a performance bottleneck in the first version of the implementation. The errors were not found by using the hand-crafted instances because their detection required a certain combination of lifelines and message sequences that does not occur often and is not naturally thought of by a human. The detected errors resulted in merged sequence diagrams that were inconsistent with the set of state machines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Conclusion and Future Work</head><p>We proposed to use a grammar-based fuzzing approach for testing and evaluating MDE tools. This has shown to be very effective in detecting errors in our implementation of an algorithm for the SDM problem. While being specific to a metamodel in our implementation, our approach can be easily adapted to a different Ecore metamodel and thus serve to test different MDE tools. Depending on particular test cases some adaptations may be useful. For instance, to test the SDM problem, instances that actually have a solution (a correctly merged sequence diagram) are desirable. This could be done by first generating a sequence diagram that represents the solution, and then infer an instance (an original and two modified diagrams) from it. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>References</head></div>		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
