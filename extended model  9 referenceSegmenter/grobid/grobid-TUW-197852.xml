<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 C:\Users\Angela\git\grobid\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-12-29T00:16+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Position Paper: m2n-A Tool for Translating Models to Natural Language Descriptions Position Paper: m2n-A Tool for Translating Models to Natural Language Descriptions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2010">2010. EduSymp 2010</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Petra</forename><surname>Brosch</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Business Informatics Group</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><surname>Randak</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Business Informatics Group</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">J</forename><surname>Clarke</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Business Informatics Group</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martina</forename><surname>Seidl</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Business Informatics Group</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Petra</forename><surname>Brosch</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Business Informatics Group</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><surname>Randak</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Business Informatics Group</orgName>
								<orgName type="institution">Vienna University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Position Paper: m2n-A Tool for Translating Models to Natural Language Descriptions Position Paper: m2n-A Tool for Translating Models to Natural Language Descriptions</title>
					</analytic>
					<monogr>
						<title level="j" type="main">Electronic Communications of the EASST</title>
						<meeting>the 6th Educators&apos; Symposium: Software Modeling in Education at MODELS 2010						</meeting>
						<imprint>
							<biblScope unit="volume">34</biblScope>
							<date type="published" when="2010">2010. EduSymp 2010</date>
						</imprint>
					</monogr>
					<note>8 pages Managing Editors: Tiziana Margaria, Julia Padberg, Gabriele Taentzer ECEASST Home Page: http://www.easst.org/eceasst/ ECEASST</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>modeling exercises, natural language description</keywords>
			</textClass>
			<abstract>
				<p>To describe the structure of a system, the UML Class Diagram yields the means-of-choice. Therefor, the Class Diagram provides concepts like class, attribute , operation, association, generalization, aggregation, enumeration, etc. When students are introduced to this diagram, they often have to solve exercises where texts in natural language are given and they have to model the described systems. When analyzing such exercises, it becomes evident that certain kinds of phrases describing a particular concept appear again and again contextualized to the described domain. In this paper, we present an approach which allows the automatic generation of tex-tual specifications from a given Class Diagram based on standard phrases in natural language. Besides supporting teachers in preparing exercises, such an approach is also valuable for various e-learning scenarios.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>When teaching modeling, one of the most repetitive and time consuming tasks is the develop- ment of exercises and the corresponding solutions. A typical exercise consists of a given textual description of an arbitrary domain (e.g., university systems, enterprises, airports) which students have to model for example with a UML Class Diagram. In order to obtain an adequate exercise, it does not suffice to prepare the textual specification only, but also the sample solution has to be modeled for checking if all taught concepts are covered and if the difficulty level and size are rea- sonable. Hence, the teacher has to describe the same content twice: once as textual specification in natural language and once as a model. As there should be a one-to-one correspondence be- tween text and model, the question at hand is if it is possible to automatically derive one artifact from the other.</p><p>Already in the early 1980s attempts of automated translation of textual descriptions into pro- gram code were conducted. R.J. Abbott [Abb83] discusses a method for deriving programming concepts like data types and references by analyzing informal English descriptions. An impor- tant remark of Abbott's work relates to the automation level of such a method. He points out that such a transformation is far away from being fully automated. User interaction is still needed to make the outcome perfect. After all natural language is imprecise and therefore leaves room for interpretation. Only if the text obeys a certain structure and the sentences are expressed in a precise, unambiguous way, the models can be automatically derived as it is for example done in the field of requirements engineering (cf. <ref type="bibr">[FKM05, WKH08]</ref>).</p><p>In contrast to models of real-world software engineering projects, the models of the exercises have not to express customers' and users' expectations, but they have to fulfill certain didactical expectations and usually show fictive, simplified scenarios only. Therefore, the construction is different: when a teacher prepares an exercise, (s)he usually does not write the text and model the sample solution afterwards, but starts with modeling the sample solution. Having the sample solution at hand, a formal specification of the scenario is available. In this paper, we propose to use the sample solution for generating the natural language textual description of the exercise.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>With five years experience in teaching the course Object-Oriented Modeling at the Vienna Uni- versity of Technology [BSW + 08], it becomes evident that specific modeling concepts are ex- pressed by recurring phrases, solely contextualized to the described domain. Phrases like "part of" for expressing composite aggregations or "is a" for generalizations are used repeatedly, irre- spective of describing houses, persons, or elements of any other domain. <ref type="figure" target="#fig_0">Fig. 1</ref> shows a typical toy example of our modeling course, covering the basic concepts of Class Diagrams. One possible textual description is as follows.</p><p>Persons have a name. Guides and visitors are persons. A guide leads multiple guided tours. Each guided tour has exactly one guide. Each visitor may attend multiple guided tours, guided tours are attended by one to 20 visitors. For each guided tour the id and the duration are known. A guided tour covers exactly one sight, but each sight is covered by multiple guided tours. A sight has a name and an address. A sight is located in one city. A city may have multiple sights. For each city name and size are known.</p><p>Although this textual description sounds natural, it follows an algorithmic pattern. In a first step, the most important class of the model is identified as a starting point for the description and input for the algorithm. This class is described by its name and its attributes. Then, inheritance relations and associations follow. In the order of exploring related classes, the procedure recurs.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Realization</head><p>The m2n tool (short for model to natural language description) yields a framework for translat- ing models of arbitrary metamodels to natural language descriptions as depicted in <ref type="figure">Fig. 2</ref>. The implementation is based on the Eclipse Modeling Framework 1 , hence any ECORE based meta- model may be integrated. Three artifacts are necessary to define a translation specification for a modeling language: a metamodel, a model traversal strategy, and a set of sentence templates for describing specific concepts. In the following, these artifacts are examined in detail for a simplified Class Diagram.</p><p>Metamodel. The Class Diagram metamodel used in our first prototype comprises a restricted set of the UML Class Diagram concepts. At the moment, we support the concepts of Class, Attribute, Generalization (single inheritance), and Association (binary).</p><p>Sentence Templates. Standard phrases in the form of sentence templates have to be provided for each concept of the metamodel. If there are more than one sentence for a concept, one is randomly selected, which makes the generated text more natural. These sentences contain wildcards, which are replaced by concrete model values.</p><p>Traversal Strategy. Each metamodel needs a dedicated traversal strategy to explore the model. A traversal strategy should implement a dedicated interface to allow reliable integration into the m2n framework by the dynamic class loading mechanism of Java. The traversal strategy for the Class Diagram implements a special kind of a breadth first search as shown in Listing 1. The most important model element is identified by a heuristic and acts as a starting point for the algorithm. Currently, subclass relations and associations are counted. Generalizations are higher ranked than associations. In the example of <ref type="figure" target="#fig_0">Fig. 1</ref>, the class Person is selected as most important element, because of its two subclasses.</p><p>For the actual text generation, the root class is first introduced in the generated text by a sentence describing its name and attributes. Second, all direct subclasses are named and put to a queue holding the succeeding model elements to describe, if they are not printed so far. Third, associations are specified. Currently, the reading direction is not explicitly available in the Class Diagram metamodel. To construct a sentence, the direction is derived from source and target p r i n t I n h e r i t a n c e ( node ) ; / * p r i n t s e n t e n c e f o r i n h e r i t a n c e ; </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The Long-Term Vision</head><p>The presented m2n-tool supports on the one hand teachers in keeping exercises consistent with the sample solutions, i.e., it facilitates the management of teaching artifacts. On the other hand, if provided to the students, they can generate natural text out of the given diagram, providing them some explanation of the diagram.</p><p>But these are only side-effects; we developed our tool with a very different intention in mind. m2n is intended to be used within a major e-learning project aiming at the development of an interactive e-learning system for Class Diagrams. In the following, we motivate why we need such an e-learning system, then we shortly describe the basic architecture, and finally we explain the important role m2n plays in these considerations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Motivation</head><p>One of the basic challenges in teaching modeling is the practical part of the course. Unlike in programming where the programs of the students are relatively easily testable by checking whether they show the expected behavior or not, the situation in modeling is different. Especially ECEASST when models are used for describing, analyzing, or designing systems, and when the models are not executable or transferable to a formal specification like code, automatic testing is hardly possible. A serious correction and grading is only possible by human teachers, often requiring considerable intellectual effort to follow the students' approach, because students often have a different viewpoint on a matter, which is still correct. It is also possible, that the specification is interpretable in different ways.</p><p>Especially in teaching modeling, learning by doing is extremely important, so such practical exercises in which the students have to derive a model from a textual specification. Even if the students use modeling tools instead of drawing the models by hand, automatic correction is hardly possible, and if it is possible then the specification has to be formulated very narrow, teaching the students to recognize patterns only instead of allowing them to be creative.</p><p>Due to this reasons it is extremely difficult, to build e-learning environments which allow the students to train on their own and to get valuable feedback from the system, especially when no teacher is at hand. Naturally, the exercises may be formulated in a very static manner in terms of multiple choice questions, where the students have to decide if a statement about a given model is true or false. Another approach is to give the students textual specifications and a sample solution, which they can compare to their own result. Although such approaches are certainly helpful, they do not allow to train creativity, which is certainly an important skill in practical modeling. In the following, we propose an approach which allows a more flexible way to practice the modeling of Class Diagrams.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">The Basic Architecture</head><p>The ideal case for teaching modeling is that the students have to realize a software engineering project where they have to create the models as primary design and documentation artifacts. Since in many courses it is not possible to combine teaching modeling with realizing a practical project (or if the assumption is that it is preferable to learn the necessary concepts first before putting them into practice), typical modeling exercises consist of small textual specifications as they may be created with m2n. The students are asked to model the given text as precisely as possible. A good approach is as follows:</p><p>1. identify classes, 2. decorate classes with attributes and operations, 3. include inheritance relationships, 4. introduce the associations between classes.</p><p>One of the major problems hampering the automatic correction is the naming of the modeling elements. Model elements are usually identified by their names and often there is a huge choice of freedom on how to name an element. To circumvent this problem we propose the following approach.</p><p>The specification is internally annotated with the information which words describe model elements. Considering our example from above, the annotated specification contains information</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">The Role of m2n</head><p>Whenever a new exercise is created, the specification has to be prepared accordingly in order to be suitable for being used as input for the e-learning tool. Without automatic support, the creation of the specification with the required information is cumbersome and time-consuming. Further- more, it has to be done extremely carefully because otherwise the exercise in the e-learning system is buggy and the students either get confused or they even learn wrong things.</p><p>For supporting the teachers in easily creating new exercises, we propose an extension of m2n which is able to create such an annotated specification automatically which may serve as input for the e-learning tool. As we have already seen, the teacher provides the sample solution model and m2n creates the textual version. Furthermore, the extension of m2n also creates an annotated version of the specification which may be directly imported from the e-learning tool. Naturally, the sample solution model provides all information necessary and the required annotation is straightforward in the case that the text is used as provided by our tool. If manual postprocessing is desired, then the danger is that the model and specification are not synchronized anymore. It may be possible that certain features are not derived as expected and then manual intervention is necessary. For this problem, we intend to develop a sophisticated update mechanism allowing to propagate modifications not only from the model to the specification but also vice versa, i.e., from the specification to the model.</p><p>Having this extension at hand, we expect to offer an e-learning tool for Class Diagrams which allows an easy creation of exercises with minimizing the problem of inconsistencies between specification and model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper, we presented a tool for transforming a given Class Diagram to a textual specifica- tion in natural language. With such a tool teachers can automatically create the textual specifi- cation from the sample solution of an exercise which may serve as a basis for the description of the students' homework or for examination questions.</p><p>We realized a first prototype implementation as Eclipse Plugin. Although the text generated in first experiments yield a good basis for describing a given model, the implementation leaves ECEASST much room for interesting extensions and fine-tuning. For example, currently the plural of a noun is obtained by appending an "s" at the end of the word-irregular forms are neglected. Furthermore, we will extend the collection of sentences and elaborate on a more sophisticated assembly algorithm of the text in order to obtain a more natural specification. Also we consider a subset of the Class Diagram's elements only at the moment-e.g., we are not able to express association classes or n-ary associations which may be treated as any other model element. Fur- thermore, better synchronization support between text and model will be an issue, because if the text has been edited manually and the model is modified, then the manual changes of the text should not get lost.</p><p>Our tool may also be used by the students for practicing. Students get a textual description of their model and by experimenting they obtain an explanation of the modifications' impact. For the realization of this use case, it will be necessary to build a dedicated user interface which is able to highlight the modifications.</p><p>The long-term goal is building an e-learning framework for learning UML diagrams. Given a textual specification, the students shall identify model elements like classes, associations, ag- gregations etc. which have to be arranged as described in the specification. The result of the students' effort is compared to a sample solution and differences (i.e., the mistakes) are reported. Similar approaches are presented in <ref type="bibr">[APL08, BM06, SM04]</ref>. In order to obtain the link be- tween textual specification and sample solution, the text has to be annotated, which is done by hand so far. With the approach presented in this paper it will be possible to annotate the textual specification automatically, facilitating the creation of new exercises.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Class Diagram example</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Figure 2: m2n Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Position Paper: m2n-A Tool for Translating Models to Natural Language Descriptions roles of the association. Referenced classes are then put into the queue. As long as the queue is not empty, the algorithm prints the details for the next node. If the model is split into parts, then a new root node has to be found. The algorithm terminates, when all model elements are printed. 1 / * v a r i a b l e d e c l a r a t i o n s * / 2 Queue nodeQueue ; / * t e m p o r a r y b u f f e r f o r a l l d i s t i n c t v i s i t e d e l e m e n t s * / 3 S e t p r i n t e d M E ; / * h o l d s a l r e a d y p r i n t e d model e l e m e n t s * / 4 S e t allME ; / * h o l d s a l l model e l e m e n t s * / 5 6 / * f u n c t i o n d e c l a r a t i o n s * / 7 v o i d g e t T e x t ( ) { / * i m p l e m e n t e d method o f i n t e r f a c e ; c a l l e d by m2n * / 8 w h i l e ( p r i n t e d M E ! = allME ) { / * a l l model e l e m e n t s p r i n t e d ? * / 9 node = l o c a l i z e R o o t C l a s s ( ) ; / * s e a r c h f o r m o s t i m p o r t a n t model e l e m e n t * / 10 nodeQueue . add ( node ) ; / * add node a s s t a r t i n g c l a s s t o nodeQueue * / 11 p r i n t M o d e l ( ) ; / * p r i n t model d e t a i l s * / 12 } 13 } 14 15 v o i d p r i n t M o d e l ( ) { 16 node = nodeQueue . p o l l ( ) ; / * g e t node t o d e s c r i b e * / 17 p r i n t A t t r i b u t e s ( node ) ; / * p r i n t s e n t e n c e f o r a t t r i b u t e s * / 18</figDesc></figure>

			<note place="foot">Proc. EduSymp 2010</note>

			<note place="foot" n="1"> http://www.eclipse.org/modeling/emf/</note>

			<note place="foot" n="7"> / 8 Volume 34 (2010)</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Program Design by Informal English Descriptions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Abbott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="882" to="894" />
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Diagnosis Method that Matches Class Diagrams in a Learning Environment for Object-Oriented Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Auxepaules</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Py</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lemeunier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICALT &apos;08: Proc. of the 2008 Eighth IEEE International Conference on Advanced Learning Technologies</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="26" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Constraint-Based Collaborative Environment for Learning UML Class Diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Baghaei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mitrovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Intelligent Tutoring Systems</title>
		<meeting>Intelligent Tutoring Systems</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="volume">4053</biblScope>
			<biblScope unit="page" from="176" to="186" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Teaching Models @ BIG-How to Give 1000 Students an Understanding of the UML</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brandsteidl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seidl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wimmer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Huemer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kappel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Promoting Software Modeling Through Active Education, Educators Symposium Models&apos;08</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="64" to="68" />
		</imprint>
		<respStmt>
			<orgName>Warsaw University of Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">From Textual Scenarios to a Conceptual Schema</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Fliedl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Mayr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Data &amp; Knowledge Engineering</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="20" to="37" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">An Intelligent Tutoring System for Entity Relationship Modelling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Suraweera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mitrovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Artificial Intelligence in Education (IJAIED)</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3-4</biblScope>
			<biblScope unit="page" from="375" to="417" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Combined Similarity Measure for Determining Similarity of Model-based and Descriptive Requirements</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wolter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Krebs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hotz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Artificial Intelligence Techniques in Software Engineering (ECAI 2008 Workshop</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="11" to="15" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
